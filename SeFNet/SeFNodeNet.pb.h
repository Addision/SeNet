// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SeFNodeNet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SeFNodeNet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SeFNodeNet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SeFNodeNet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SeFNodeNet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SeFNodeNet_2eproto;
class ChatToGamePacket;
class ChatToGamePacketDefaultTypeInternal;
extern ChatToGamePacketDefaultTypeInternal _ChatToGamePacket_default_instance_;
class ChatToGatePacket;
class ChatToGatePacketDefaultTypeInternal;
extern ChatToGatePacketDefaultTypeInternal _ChatToGatePacket_default_instance_;
class DBToWorldPacket;
class DBToWorldPacketDefaultTypeInternal;
extern DBToWorldPacketDefaultTypeInternal _DBToWorldPacket_default_instance_;
class GameToChatPacket;
class GameToChatPacketDefaultTypeInternal;
extern GameToChatPacketDefaultTypeInternal _GameToChatPacket_default_instance_;
class GameToGatePacket;
class GameToGatePacketDefaultTypeInternal;
extern GameToGatePacketDefaultTypeInternal _GameToGatePacket_default_instance_;
class GameToWorldPacket;
class GameToWorldPacketDefaultTypeInternal;
extern GameToWorldPacketDefaultTypeInternal _GameToWorldPacket_default_instance_;
class GateToChatPacket;
class GateToChatPacketDefaultTypeInternal;
extern GateToChatPacketDefaultTypeInternal _GateToChatPacket_default_instance_;
class GateToGamePacket;
class GateToGamePacketDefaultTypeInternal;
extern GateToGamePacketDefaultTypeInternal _GateToGamePacket_default_instance_;
class GateToLoginPacket;
class GateToLoginPacketDefaultTypeInternal;
extern GateToLoginPacketDefaultTypeInternal _GateToLoginPacket_default_instance_;
class GateToWorldPacket;
class GateToWorldPacketDefaultTypeInternal;
extern GateToWorldPacketDefaultTypeInternal _GateToWorldPacket_default_instance_;
class LoginToGatePacket;
class LoginToGatePacketDefaultTypeInternal;
extern LoginToGatePacketDefaultTypeInternal _LoginToGatePacket_default_instance_;
class LoginToWorldPacket;
class LoginToWorldPacketDefaultTypeInternal;
extern LoginToWorldPacketDefaultTypeInternal _LoginToWorldPacket_default_instance_;
class MasterToNodePacket;
class MasterToNodePacketDefaultTypeInternal;
extern MasterToNodePacketDefaultTypeInternal _MasterToNodePacket_default_instance_;
class NodeToMasterPacket;
class NodeToMasterPacketDefaultTypeInternal;
extern NodeToMasterPacketDefaultTypeInternal _NodeToMasterPacket_default_instance_;
class ServerHeartBeat;
class ServerHeartBeatDefaultTypeInternal;
extern ServerHeartBeatDefaultTypeInternal _ServerHeartBeat_default_instance_;
class ServerReport;
class ServerReportDefaultTypeInternal;
extern ServerReportDefaultTypeInternal _ServerReport_default_instance_;
class ServerReportList;
class ServerReportListDefaultTypeInternal;
extern ServerReportListDefaultTypeInternal _ServerReportList_default_instance_;
class WorldToDBPacket;
class WorldToDBPacketDefaultTypeInternal;
extern WorldToDBPacketDefaultTypeInternal _WorldToDBPacket_default_instance_;
class WorldToGamePacket;
class WorldToGamePacketDefaultTypeInternal;
extern WorldToGamePacketDefaultTypeInternal _WorldToGamePacket_default_instance_;
class WorldToGatePacket;
class WorldToGatePacketDefaultTypeInternal;
extern WorldToGatePacketDefaultTypeInternal _WorldToGatePacket_default_instance_;
class WorldToLoginPacket;
class WorldToLoginPacketDefaultTypeInternal;
extern WorldToLoginPacketDefaultTypeInternal _WorldToLoginPacket_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ChatToGamePacket* Arena::CreateMaybeMessage<::ChatToGamePacket>(Arena*);
template<> ::ChatToGatePacket* Arena::CreateMaybeMessage<::ChatToGatePacket>(Arena*);
template<> ::DBToWorldPacket* Arena::CreateMaybeMessage<::DBToWorldPacket>(Arena*);
template<> ::GameToChatPacket* Arena::CreateMaybeMessage<::GameToChatPacket>(Arena*);
template<> ::GameToGatePacket* Arena::CreateMaybeMessage<::GameToGatePacket>(Arena*);
template<> ::GameToWorldPacket* Arena::CreateMaybeMessage<::GameToWorldPacket>(Arena*);
template<> ::GateToChatPacket* Arena::CreateMaybeMessage<::GateToChatPacket>(Arena*);
template<> ::GateToGamePacket* Arena::CreateMaybeMessage<::GateToGamePacket>(Arena*);
template<> ::GateToLoginPacket* Arena::CreateMaybeMessage<::GateToLoginPacket>(Arena*);
template<> ::GateToWorldPacket* Arena::CreateMaybeMessage<::GateToWorldPacket>(Arena*);
template<> ::LoginToGatePacket* Arena::CreateMaybeMessage<::LoginToGatePacket>(Arena*);
template<> ::LoginToWorldPacket* Arena::CreateMaybeMessage<::LoginToWorldPacket>(Arena*);
template<> ::MasterToNodePacket* Arena::CreateMaybeMessage<::MasterToNodePacket>(Arena*);
template<> ::NodeToMasterPacket* Arena::CreateMaybeMessage<::NodeToMasterPacket>(Arena*);
template<> ::ServerHeartBeat* Arena::CreateMaybeMessage<::ServerHeartBeat>(Arena*);
template<> ::ServerReport* Arena::CreateMaybeMessage<::ServerReport>(Arena*);
template<> ::ServerReportList* Arena::CreateMaybeMessage<::ServerReportList>(Arena*);
template<> ::WorldToDBPacket* Arena::CreateMaybeMessage<::WorldToDBPacket>(Arena*);
template<> ::WorldToGamePacket* Arena::CreateMaybeMessage<::WorldToGamePacket>(Arena*);
template<> ::WorldToGatePacket* Arena::CreateMaybeMessage<::WorldToGatePacket>(Arena*);
template<> ::WorldToLoginPacket* Arena::CreateMaybeMessage<::WorldToLoginPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EServerState : int {
  EST_CRASH = 0,
  EST_NORMAL = 1,
  EST_BUSY = 2,
  EST_FIRE = 3,
  EST_MAINTEN = 4,
  EServerState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EServerState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EServerState_IsValid(int value);
constexpr EServerState EServerState_MIN = EST_CRASH;
constexpr EServerState EServerState_MAX = EST_MAINTEN;
constexpr int EServerState_ARRAYSIZE = EServerState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EServerState_descriptor();
template<typename T>
inline const std::string& EServerState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EServerState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EServerState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EServerState_descriptor(), enum_t_value);
}
inline bool EServerState_Parse(
    const std::string& name, EServerState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EServerState>(
    EServerState_descriptor(), name, value);
}
enum ServerNodeMsgID : int {
  SERVER_NODE_MSG_ID = 0,
  GATE_ROUTE_TO_LOGIN = 10001,
  LOGIN_ROUTE_TO_GATE = 10002,
  GATE_ROUTE_TO_GAME = 10003,
  GAME_ROUTE_TO_GATE = 10004,
  GATE_ROUTE_TO_CHAT = 10005,
  CHAT_ROUTE_TO_GATE = 10006,
  WORLD_ROUTE_TO_GATE = 10007,
  GATE_ROUTE_TO_WORLD = 10008,
  GAME_ROUTE_TO_CHAT = 10009,
  CHAT_ROUTE_TO_GAME = 10010,
  GAME_ROUTE_TO_WORLD = 10011,
  WORLD_ROUTE_TO_GAME = 10012,
  LOGIN_ROUTE_TO_WORLD = 10013,
  WORLD_ROUTE_TO_LOGIN = 10014,
  WORLD_ROUTE_TO_DB = 10015,
  DB_ROUTE_TO_WORLD = 10016,
  PLAYER_ROUTE_TO_GATE = 10017,
  GATE_ROUTE_TO_PLAYER = 10018,
  GAME_PLAYER_OFFLINE = 10051,
  REPORT_CLIENT_INFO_TO_SERVER = 10054,
  MASTER_REPORT_SERVER_INFO_TO_SERVER = 10053,
  ServerNodeMsgID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServerNodeMsgID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServerNodeMsgID_IsValid(int value);
constexpr ServerNodeMsgID ServerNodeMsgID_MIN = SERVER_NODE_MSG_ID;
constexpr ServerNodeMsgID ServerNodeMsgID_MAX = REPORT_CLIENT_INFO_TO_SERVER;
constexpr int ServerNodeMsgID_ARRAYSIZE = ServerNodeMsgID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerNodeMsgID_descriptor();
template<typename T>
inline const std::string& ServerNodeMsgID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerNodeMsgID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerNodeMsgID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerNodeMsgID_descriptor(), enum_t_value);
}
inline bool ServerNodeMsgID_Parse(
    const std::string& name, ServerNodeMsgID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerNodeMsgID>(
    ServerNodeMsgID_descriptor(), name, value);
}
// ===================================================================

class ServerReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerReport) */ {
 public:
  ServerReport();
  virtual ~ServerReport();

  ServerReport(const ServerReport& from);
  ServerReport(ServerReport&& from) noexcept
    : ServerReport() {
    *this = ::std::move(from);
  }

  inline ServerReport& operator=(const ServerReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerReport& operator=(ServerReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerReport* internal_default_instance() {
    return reinterpret_cast<const ServerReport*>(
               &_ServerReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerReport& a, ServerReport& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerReport* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerReport* New() const final {
    return CreateMaybeMessage<ServerReport>(nullptr);
  }

  ServerReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerReport& from);
  void MergeFrom(const ServerReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SeFNodeNet_2eproto);
    return ::descriptor_table_SeFNodeNet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerNameFieldNumber = 2,
    kServerIpFieldNumber = 3,
    kServerIdFieldNumber = 1,
    kServerPortFieldNumber = 4,
    kServerMaxOnlineFieldNumber = 5,
    kServerCurCountFieldNumber = 6,
    kServerStateFieldNumber = 7,
    kServerTypeFieldNumber = 8,
  };
  // bytes server_name = 2;
  void clear_server_name();
  const std::string& server_name() const;
  void set_server_name(const std::string& value);
  void set_server_name(std::string&& value);
  void set_server_name(const char* value);
  void set_server_name(const void* value, size_t size);
  std::string* mutable_server_name();
  std::string* release_server_name();
  void set_allocated_server_name(std::string* server_name);
  private:
  const std::string& _internal_server_name() const;
  void _internal_set_server_name(const std::string& value);
  std::string* _internal_mutable_server_name();
  public:

  // bytes server_ip = 3;
  void clear_server_ip();
  const std::string& server_ip() const;
  void set_server_ip(const std::string& value);
  void set_server_ip(std::string&& value);
  void set_server_ip(const char* value);
  void set_server_ip(const void* value, size_t size);
  std::string* mutable_server_ip();
  std::string* release_server_ip();
  void set_allocated_server_ip(std::string* server_ip);
  private:
  const std::string& _internal_server_ip() const;
  void _internal_set_server_ip(const std::string& value);
  std::string* _internal_mutable_server_ip();
  public:

  // int32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 server_port = 4;
  void clear_server_port();
  ::PROTOBUF_NAMESPACE_ID::int32 server_port() const;
  void set_server_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_port() const;
  void _internal_set_server_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 server_max_online = 5;
  void clear_server_max_online();
  ::PROTOBUF_NAMESPACE_ID::int32 server_max_online() const;
  void set_server_max_online(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_max_online() const;
  void _internal_set_server_max_online(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 server_cur_count = 6;
  void clear_server_cur_count();
  ::PROTOBUF_NAMESPACE_ID::int32 server_cur_count() const;
  void set_server_cur_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_cur_count() const;
  void _internal_set_server_cur_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .EServerState server_state = 7;
  void clear_server_state();
  ::EServerState server_state() const;
  void set_server_state(::EServerState value);
  private:
  ::EServerState _internal_server_state() const;
  void _internal_set_server_state(::EServerState value);
  public:

  // int32 server_type = 8;
  void clear_server_type();
  ::PROTOBUF_NAMESPACE_ID::int32 server_type() const;
  void set_server_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_type() const;
  void _internal_set_server_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ServerReport)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_max_online_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_cur_count_;
  int server_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SeFNodeNet_2eproto;
};
// -------------------------------------------------------------------

class ServerReportList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerReportList) */ {
 public:
  ServerReportList();
  virtual ~ServerReportList();

  ServerReportList(const ServerReportList& from);
  ServerReportList(ServerReportList&& from) noexcept
    : ServerReportList() {
    *this = ::std::move(from);
  }

  inline ServerReportList& operator=(const ServerReportList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerReportList& operator=(ServerReportList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerReportList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerReportList* internal_default_instance() {
    return reinterpret_cast<const ServerReportList*>(
               &_ServerReportList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerReportList& a, ServerReportList& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerReportList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerReportList* New() const final {
    return CreateMaybeMessage<ServerReportList>(nullptr);
  }

  ServerReportList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerReportList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerReportList& from);
  void MergeFrom(const ServerReportList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerReportList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerReportList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SeFNodeNet_2eproto);
    return ::descriptor_table_SeFNodeNet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerInfoFieldNumber = 1,
  };
  // repeated .ServerReport server_info = 1;
  int server_info_size() const;
  private:
  int _internal_server_info_size() const;
  public:
  void clear_server_info();
  ::ServerReport* mutable_server_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerReport >*
      mutable_server_info();
  private:
  const ::ServerReport& _internal_server_info(int index) const;
  ::ServerReport* _internal_add_server_info();
  public:
  const ::ServerReport& server_info(int index) const;
  ::ServerReport* add_server_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerReport >&
      server_info() const;

  // @@protoc_insertion_point(class_scope:ServerReportList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerReport > server_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SeFNodeNet_2eproto;
};
// -------------------------------------------------------------------

class ServerHeartBeat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerHeartBeat) */ {
 public:
  ServerHeartBeat();
  virtual ~ServerHeartBeat();

  ServerHeartBeat(const ServerHeartBeat& from);
  ServerHeartBeat(ServerHeartBeat&& from) noexcept
    : ServerHeartBeat() {
    *this = ::std::move(from);
  }

  inline ServerHeartBeat& operator=(const ServerHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerHeartBeat& operator=(ServerHeartBeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerHeartBeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerHeartBeat* internal_default_instance() {
    return reinterpret_cast<const ServerHeartBeat*>(
               &_ServerHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerHeartBeat& a, ServerHeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerHeartBeat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerHeartBeat* New() const final {
    return CreateMaybeMessage<ServerHeartBeat>(nullptr);
  }

  ServerHeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerHeartBeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerHeartBeat& from);
  void MergeFrom(const ServerHeartBeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerHeartBeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerHeartBeat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SeFNodeNet_2eproto);
    return ::descriptor_table_SeFNodeNet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
  };
  // int32 count = 1;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ServerHeartBeat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SeFNodeNet_2eproto;
};
// -------------------------------------------------------------------

class NodeToMasterPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NodeToMasterPacket) */ {
 public:
  NodeToMasterPacket();
  virtual ~NodeToMasterPacket();

  NodeToMasterPacket(const NodeToMasterPacket& from);
  NodeToMasterPacket(NodeToMasterPacket&& from) noexcept
    : NodeToMasterPacket() {
    *this = ::std::move(from);
  }

  inline NodeToMasterPacket& operator=(const NodeToMasterPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeToMasterPacket& operator=(NodeToMasterPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeToMasterPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeToMasterPacket* internal_default_instance() {
    return reinterpret_cast<const NodeToMasterPacket*>(
               &_NodeToMasterPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NodeToMasterPacket& a, NodeToMasterPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeToMasterPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeToMasterPacket* New() const final {
    return CreateMaybeMessage<NodeToMasterPacket>(nullptr);
  }

  NodeToMasterPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeToMasterPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeToMasterPacket& from);
  void MergeFrom(const NodeToMasterPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeToMasterPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NodeToMasterPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SeFNodeNet_2eproto);
    return ::descriptor_table_SeFNodeNet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerInfoFieldNumber = 1,
  };
  // .ServerReport server_info = 1;
  bool has_server_info() const;
  private:
  bool _internal_has_server_info() const;
  public:
  void clear_server_info();
  const ::ServerReport& server_info() const;
  ::ServerReport* release_server_info();
  ::ServerReport* mutable_server_info();
  void set_allocated_server_info(::ServerReport* server_info);
  private:
  const ::ServerReport& _internal_server_info() const;
  ::ServerReport* _internal_mutable_server_info();
  public:

  // @@protoc_insertion_point(class_scope:NodeToMasterPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ServerReport* server_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SeFNodeNet_2eproto;
};
// -------------------------------------------------------------------

class MasterToNodePacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MasterToNodePacket) */ {
 public:
  MasterToNodePacket();
  virtual ~MasterToNodePacket();

  MasterToNodePacket(const MasterToNodePacket& from);
  MasterToNodePacket(MasterToNodePacket&& from) noexcept
    : MasterToNodePacket() {
    *this = ::std::move(from);
  }

  inline MasterToNodePacket& operator=(const MasterToNodePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline MasterToNodePacket& operator=(MasterToNodePacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MasterToNodePacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MasterToNodePacket* internal_default_instance() {
    return reinterpret_cast<const MasterToNodePacket*>(
               &_MasterToNodePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MasterToNodePacket& a, MasterToNodePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(MasterToNodePacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MasterToNodePacket* New() const final {
    return CreateMaybeMessage<MasterToNodePacket>(nullptr);
  }

  MasterToNodePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MasterToNodePacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MasterToNodePacket& from);
  void MergeFrom(const MasterToNodePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MasterToNodePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MasterToNodePacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SeFNodeNet_2eproto);
    return ::descriptor_table_SeFNodeNet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MasterToNodePacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SeFNodeNet_2eproto;
};
// -------------------------------------------------------------------

class GateToLoginPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GateToLoginPacket) */ {
 public:
  GateToLoginPacket();
  virtual ~GateToLoginPacket();

  GateToLoginPacket(const GateToLoginPacket& from);
  GateToLoginPacket(GateToLoginPacket&& from) noexcept
    : GateToLoginPacket() {
    *this = ::std::move(from);
  }

  inline GateToLoginPacket& operator=(const GateToLoginPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GateToLoginPacket& operator=(GateToLoginPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GateToLoginPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GateToLoginPacket* internal_default_instance() {
    return reinterpret_cast<const GateToLoginPacket*>(
               &_GateToLoginPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GateToLoginPacket& a, GateToLoginPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GateToLoginPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GateToLoginPacket* New() const final {
    return CreateMaybeMessage<GateToLoginPacket>(nullptr);
  }

  GateToLoginPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GateToLoginPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GateToLoginPacket& from);
  void MergeFrom(const GateToLoginPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GateToLoginPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GateToLoginPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SeFNodeNet_2eproto);
    return ::descriptor_table_SeFNodeNet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBodyFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
  };
  // bytes msg_body = 3;
  void clear_msg_body();
  const std::string& msg_body() const;
  void set_msg_body(const std::string& value);
  void set_msg_body(std::string&& value);
  void set_msg_body(const char* value);
  void set_msg_body(const void* value, size_t size);
  std::string* mutable_msg_body();
  std::string* release_msg_body();
  void set_allocated_msg_body(std::string* msg_body);
  private:
  const std::string& _internal_msg_body() const;
  void _internal_set_msg_body(const std::string& value);
  std::string* _internal_mutable_msg_body();
  public:

  // uint64 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 msg_id = 2;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GateToLoginPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_body_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SeFNodeNet_2eproto;
};
// -------------------------------------------------------------------

class LoginToGatePacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginToGatePacket) */ {
 public:
  LoginToGatePacket();
  virtual ~LoginToGatePacket();

  LoginToGatePacket(const LoginToGatePacket& from);
  LoginToGatePacket(LoginToGatePacket&& from) noexcept
    : LoginToGatePacket() {
    *this = ::std::move(from);
  }

  inline LoginToGatePacket& operator=(const LoginToGatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginToGatePacket& operator=(LoginToGatePacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginToGatePacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginToGatePacket* internal_default_instance() {
    return reinterpret_cast<const LoginToGatePacket*>(
               &_LoginToGatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LoginToGatePacket& a, LoginToGatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginToGatePacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginToGatePacket* New() const final {
    return CreateMaybeMessage<LoginToGatePacket>(nullptr);
  }

  LoginToGatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginToGatePacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginToGatePacket& from);
  void MergeFrom(const LoginToGatePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginToGatePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginToGatePacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SeFNodeNet_2eproto);
    return ::descriptor_table_SeFNodeNet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBodyFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
  };
  // bytes msg_body = 3;
  void clear_msg_body();
  const std::string& msg_body() const;
  void set_msg_body(const std::string& value);
  void set_msg_body(std::string&& value);
  void set_msg_body(const char* value);
  void set_msg_body(const void* value, size_t size);
  std::string* mutable_msg_body();
  std::string* release_msg_body();
  void set_allocated_msg_body(std::string* msg_body);
  private:
  const std::string& _internal_msg_body() const;
  void _internal_set_msg_body(const std::string& value);
  std::string* _internal_mutable_msg_body();
  public:

  // uint64 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 msg_id = 2;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LoginToGatePacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_body_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SeFNodeNet_2eproto;
};
// -------------------------------------------------------------------

class GateToGamePacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GateToGamePacket) */ {
 public:
  GateToGamePacket();
  virtual ~GateToGamePacket();

  GateToGamePacket(const GateToGamePacket& from);
  GateToGamePacket(GateToGamePacket&& from) noexcept
    : GateToGamePacket() {
    *this = ::std::move(from);
  }

  inline GateToGamePacket& operator=(const GateToGamePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GateToGamePacket& operator=(GateToGamePacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GateToGamePacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GateToGamePacket* internal_default_instance() {
    return reinterpret_cast<const GateToGamePacket*>(
               &_GateToGamePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GateToGamePacket& a, GateToGamePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GateToGamePacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GateToGamePacket* New() const final {
    return CreateMaybeMessage<GateToGamePacket>(nullptr);
  }

  GateToGamePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GateToGamePacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GateToGamePacket& from);
  void MergeFrom(const GateToGamePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GateToGamePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GateToGamePacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SeFNodeNet_2eproto);
    return ::descriptor_table_SeFNodeNet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBodyFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
  };
  // bytes msg_body = 3;
  void clear_msg_body();
  const std::string& msg_body() const;
  void set_msg_body(const std::string& value);
  void set_msg_body(std::string&& value);
  void set_msg_body(const char* value);
  void set_msg_body(const void* value, size_t size);
  std::string* mutable_msg_body();
  std::string* release_msg_body();
  void set_allocated_msg_body(std::string* msg_body);
  private:
  const std::string& _internal_msg_body() const;
  void _internal_set_msg_body(const std::string& value);
  std::string* _internal_mutable_msg_body();
  public:

  // uint64 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 msg_id = 2;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GateToGamePacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_body_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SeFNodeNet_2eproto;
};
// -------------------------------------------------------------------

class GameToGatePacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameToGatePacket) */ {
 public:
  GameToGatePacket();
  virtual ~GameToGatePacket();

  GameToGatePacket(const GameToGatePacket& from);
  GameToGatePacket(GameToGatePacket&& from) noexcept
    : GameToGatePacket() {
    *this = ::std::move(from);
  }

  inline GameToGatePacket& operator=(const GameToGatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameToGatePacket& operator=(GameToGatePacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameToGatePacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameToGatePacket* internal_default_instance() {
    return reinterpret_cast<const GameToGatePacket*>(
               &_GameToGatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GameToGatePacket& a, GameToGatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GameToGatePacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameToGatePacket* New() const final {
    return CreateMaybeMessage<GameToGatePacket>(nullptr);
  }

  GameToGatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameToGatePacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameToGatePacket& from);
  void MergeFrom(const GameToGatePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameToGatePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameToGatePacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SeFNodeNet_2eproto);
    return ::descriptor_table_SeFNodeNet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBodyFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
  };
  // bytes msg_body = 3;
  void clear_msg_body();
  const std::string& msg_body() const;
  void set_msg_body(const std::string& value);
  void set_msg_body(std::string&& value);
  void set_msg_body(const char* value);
  void set_msg_body(const void* value, size_t size);
  std::string* mutable_msg_body();
  std::string* release_msg_body();
  void set_allocated_msg_body(std::string* msg_body);
  private:
  const std::string& _internal_msg_body() const;
  void _internal_set_msg_body(const std::string& value);
  std::string* _internal_mutable_msg_body();
  public:

  // uint64 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 msg_id = 2;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GameToGatePacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_body_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SeFNodeNet_2eproto;
};
// -------------------------------------------------------------------

class GateToChatPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GateToChatPacket) */ {
 public:
  GateToChatPacket();
  virtual ~GateToChatPacket();

  GateToChatPacket(const GateToChatPacket& from);
  GateToChatPacket(GateToChatPacket&& from) noexcept
    : GateToChatPacket() {
    *this = ::std::move(from);
  }

  inline GateToChatPacket& operator=(const GateToChatPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GateToChatPacket& operator=(GateToChatPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GateToChatPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GateToChatPacket* internal_default_instance() {
    return reinterpret_cast<const GateToChatPacket*>(
               &_GateToChatPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GateToChatPacket& a, GateToChatPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GateToChatPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GateToChatPacket* New() const final {
    return CreateMaybeMessage<GateToChatPacket>(nullptr);
  }

  GateToChatPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GateToChatPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GateToChatPacket& from);
  void MergeFrom(const GateToChatPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GateToChatPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GateToChatPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SeFNodeNet_2eproto);
    return ::descriptor_table_SeFNodeNet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBodyFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
  };
  // bytes msg_body = 3;
  void clear_msg_body();
  const std::string& msg_body() const;
  void set_msg_body(const std::string& value);
  void set_msg_body(std::string&& value);
  void set_msg_body(const char* value);
  void set_msg_body(const void* value, size_t size);
  std::string* mutable_msg_body();
  std::string* release_msg_body();
  void set_allocated_msg_body(std::string* msg_body);
  private:
  const std::string& _internal_msg_body() const;
  void _internal_set_msg_body(const std::string& value);
  std::string* _internal_mutable_msg_body();
  public:

  // uint64 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 msg_id = 2;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GateToChatPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_body_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SeFNodeNet_2eproto;
};
// -------------------------------------------------------------------

class ChatToGatePacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatToGatePacket) */ {
 public:
  ChatToGatePacket();
  virtual ~ChatToGatePacket();

  ChatToGatePacket(const ChatToGatePacket& from);
  ChatToGatePacket(ChatToGatePacket&& from) noexcept
    : ChatToGatePacket() {
    *this = ::std::move(from);
  }

  inline ChatToGatePacket& operator=(const ChatToGatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatToGatePacket& operator=(ChatToGatePacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatToGatePacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatToGatePacket* internal_default_instance() {
    return reinterpret_cast<const ChatToGatePacket*>(
               &_ChatToGatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ChatToGatePacket& a, ChatToGatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatToGatePacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatToGatePacket* New() const final {
    return CreateMaybeMessage<ChatToGatePacket>(nullptr);
  }

  ChatToGatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatToGatePacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatToGatePacket& from);
  void MergeFrom(const ChatToGatePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatToGatePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatToGatePacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SeFNodeNet_2eproto);
    return ::descriptor_table_SeFNodeNet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBodyFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
  };
  // bytes msg_body = 3;
  void clear_msg_body();
  const std::string& msg_body() const;
  void set_msg_body(const std::string& value);
  void set_msg_body(std::string&& value);
  void set_msg_body(const char* value);
  void set_msg_body(const void* value, size_t size);
  std::string* mutable_msg_body();
  std::string* release_msg_body();
  void set_allocated_msg_body(std::string* msg_body);
  private:
  const std::string& _internal_msg_body() const;
  void _internal_set_msg_body(const std::string& value);
  std::string* _internal_mutable_msg_body();
  public:

  // uint64 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 msg_id = 2;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChatToGatePacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_body_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SeFNodeNet_2eproto;
};
// -------------------------------------------------------------------

class WorldToGatePacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorldToGatePacket) */ {
 public:
  WorldToGatePacket();
  virtual ~WorldToGatePacket();

  WorldToGatePacket(const WorldToGatePacket& from);
  WorldToGatePacket(WorldToGatePacket&& from) noexcept
    : WorldToGatePacket() {
    *this = ::std::move(from);
  }

  inline WorldToGatePacket& operator=(const WorldToGatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldToGatePacket& operator=(WorldToGatePacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorldToGatePacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldToGatePacket* internal_default_instance() {
    return reinterpret_cast<const WorldToGatePacket*>(
               &_WorldToGatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(WorldToGatePacket& a, WorldToGatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldToGatePacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorldToGatePacket* New() const final {
    return CreateMaybeMessage<WorldToGatePacket>(nullptr);
  }

  WorldToGatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorldToGatePacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorldToGatePacket& from);
  void MergeFrom(const WorldToGatePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldToGatePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WorldToGatePacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SeFNodeNet_2eproto);
    return ::descriptor_table_SeFNodeNet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBodyFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
  };
  // bytes msg_body = 3;
  void clear_msg_body();
  const std::string& msg_body() const;
  void set_msg_body(const std::string& value);
  void set_msg_body(std::string&& value);
  void set_msg_body(const char* value);
  void set_msg_body(const void* value, size_t size);
  std::string* mutable_msg_body();
  std::string* release_msg_body();
  void set_allocated_msg_body(std::string* msg_body);
  private:
  const std::string& _internal_msg_body() const;
  void _internal_set_msg_body(const std::string& value);
  std::string* _internal_mutable_msg_body();
  public:

  // uint64 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 msg_id = 2;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:WorldToGatePacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_body_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SeFNodeNet_2eproto;
};
// -------------------------------------------------------------------

class GateToWorldPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GateToWorldPacket) */ {
 public:
  GateToWorldPacket();
  virtual ~GateToWorldPacket();

  GateToWorldPacket(const GateToWorldPacket& from);
  GateToWorldPacket(GateToWorldPacket&& from) noexcept
    : GateToWorldPacket() {
    *this = ::std::move(from);
  }

  inline GateToWorldPacket& operator=(const GateToWorldPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GateToWorldPacket& operator=(GateToWorldPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GateToWorldPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GateToWorldPacket* internal_default_instance() {
    return reinterpret_cast<const GateToWorldPacket*>(
               &_GateToWorldPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GateToWorldPacket& a, GateToWorldPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GateToWorldPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GateToWorldPacket* New() const final {
    return CreateMaybeMessage<GateToWorldPacket>(nullptr);
  }

  GateToWorldPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GateToWorldPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GateToWorldPacket& from);
  void MergeFrom(const GateToWorldPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GateToWorldPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GateToWorldPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SeFNodeNet_2eproto);
    return ::descriptor_table_SeFNodeNet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBodyFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
  };
  // bytes msg_body = 3;
  void clear_msg_body();
  const std::string& msg_body() const;
  void set_msg_body(const std::string& value);
  void set_msg_body(std::string&& value);
  void set_msg_body(const char* value);
  void set_msg_body(const void* value, size_t size);
  std::string* mutable_msg_body();
  std::string* release_msg_body();
  void set_allocated_msg_body(std::string* msg_body);
  private:
  const std::string& _internal_msg_body() const;
  void _internal_set_msg_body(const std::string& value);
  std::string* _internal_mutable_msg_body();
  public:

  // uint64 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 msg_id = 2;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GateToWorldPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_body_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SeFNodeNet_2eproto;
};
// -------------------------------------------------------------------

class GameToChatPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameToChatPacket) */ {
 public:
  GameToChatPacket();
  virtual ~GameToChatPacket();

  GameToChatPacket(const GameToChatPacket& from);
  GameToChatPacket(GameToChatPacket&& from) noexcept
    : GameToChatPacket() {
    *this = ::std::move(from);
  }

  inline GameToChatPacket& operator=(const GameToChatPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameToChatPacket& operator=(GameToChatPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameToChatPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameToChatPacket* internal_default_instance() {
    return reinterpret_cast<const GameToChatPacket*>(
               &_GameToChatPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GameToChatPacket& a, GameToChatPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GameToChatPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameToChatPacket* New() const final {
    return CreateMaybeMessage<GameToChatPacket>(nullptr);
  }

  GameToChatPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameToChatPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameToChatPacket& from);
  void MergeFrom(const GameToChatPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameToChatPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameToChatPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SeFNodeNet_2eproto);
    return ::descriptor_table_SeFNodeNet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBodyFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
  };
  // bytes msg_body = 3;
  void clear_msg_body();
  const std::string& msg_body() const;
  void set_msg_body(const std::string& value);
  void set_msg_body(std::string&& value);
  void set_msg_body(const char* value);
  void set_msg_body(const void* value, size_t size);
  std::string* mutable_msg_body();
  std::string* release_msg_body();
  void set_allocated_msg_body(std::string* msg_body);
  private:
  const std::string& _internal_msg_body() const;
  void _internal_set_msg_body(const std::string& value);
  std::string* _internal_mutable_msg_body();
  public:

  // uint64 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 msg_id = 2;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GameToChatPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_body_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SeFNodeNet_2eproto;
};
// -------------------------------------------------------------------

class ChatToGamePacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatToGamePacket) */ {
 public:
  ChatToGamePacket();
  virtual ~ChatToGamePacket();

  ChatToGamePacket(const ChatToGamePacket& from);
  ChatToGamePacket(ChatToGamePacket&& from) noexcept
    : ChatToGamePacket() {
    *this = ::std::move(from);
  }

  inline ChatToGamePacket& operator=(const ChatToGamePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatToGamePacket& operator=(ChatToGamePacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatToGamePacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatToGamePacket* internal_default_instance() {
    return reinterpret_cast<const ChatToGamePacket*>(
               &_ChatToGamePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ChatToGamePacket& a, ChatToGamePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatToGamePacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatToGamePacket* New() const final {
    return CreateMaybeMessage<ChatToGamePacket>(nullptr);
  }

  ChatToGamePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatToGamePacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatToGamePacket& from);
  void MergeFrom(const ChatToGamePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatToGamePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatToGamePacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SeFNodeNet_2eproto);
    return ::descriptor_table_SeFNodeNet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBodyFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
  };
  // bytes msg_body = 3;
  void clear_msg_body();
  const std::string& msg_body() const;
  void set_msg_body(const std::string& value);
  void set_msg_body(std::string&& value);
  void set_msg_body(const char* value);
  void set_msg_body(const void* value, size_t size);
  std::string* mutable_msg_body();
  std::string* release_msg_body();
  void set_allocated_msg_body(std::string* msg_body);
  private:
  const std::string& _internal_msg_body() const;
  void _internal_set_msg_body(const std::string& value);
  std::string* _internal_mutable_msg_body();
  public:

  // uint64 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 msg_id = 2;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChatToGamePacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_body_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SeFNodeNet_2eproto;
};
// -------------------------------------------------------------------

class GameToWorldPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameToWorldPacket) */ {
 public:
  GameToWorldPacket();
  virtual ~GameToWorldPacket();

  GameToWorldPacket(const GameToWorldPacket& from);
  GameToWorldPacket(GameToWorldPacket&& from) noexcept
    : GameToWorldPacket() {
    *this = ::std::move(from);
  }

  inline GameToWorldPacket& operator=(const GameToWorldPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameToWorldPacket& operator=(GameToWorldPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameToWorldPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameToWorldPacket* internal_default_instance() {
    return reinterpret_cast<const GameToWorldPacket*>(
               &_GameToWorldPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GameToWorldPacket& a, GameToWorldPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GameToWorldPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameToWorldPacket* New() const final {
    return CreateMaybeMessage<GameToWorldPacket>(nullptr);
  }

  GameToWorldPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameToWorldPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameToWorldPacket& from);
  void MergeFrom(const GameToWorldPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameToWorldPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameToWorldPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SeFNodeNet_2eproto);
    return ::descriptor_table_SeFNodeNet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBodyFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
  };
  // bytes msg_body = 3;
  void clear_msg_body();
  const std::string& msg_body() const;
  void set_msg_body(const std::string& value);
  void set_msg_body(std::string&& value);
  void set_msg_body(const char* value);
  void set_msg_body(const void* value, size_t size);
  std::string* mutable_msg_body();
  std::string* release_msg_body();
  void set_allocated_msg_body(std::string* msg_body);
  private:
  const std::string& _internal_msg_body() const;
  void _internal_set_msg_body(const std::string& value);
  std::string* _internal_mutable_msg_body();
  public:

  // uint64 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 msg_id = 2;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GameToWorldPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_body_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SeFNodeNet_2eproto;
};
// -------------------------------------------------------------------

class WorldToGamePacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorldToGamePacket) */ {
 public:
  WorldToGamePacket();
  virtual ~WorldToGamePacket();

  WorldToGamePacket(const WorldToGamePacket& from);
  WorldToGamePacket(WorldToGamePacket&& from) noexcept
    : WorldToGamePacket() {
    *this = ::std::move(from);
  }

  inline WorldToGamePacket& operator=(const WorldToGamePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldToGamePacket& operator=(WorldToGamePacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorldToGamePacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldToGamePacket* internal_default_instance() {
    return reinterpret_cast<const WorldToGamePacket*>(
               &_WorldToGamePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(WorldToGamePacket& a, WorldToGamePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldToGamePacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorldToGamePacket* New() const final {
    return CreateMaybeMessage<WorldToGamePacket>(nullptr);
  }

  WorldToGamePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorldToGamePacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorldToGamePacket& from);
  void MergeFrom(const WorldToGamePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldToGamePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WorldToGamePacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SeFNodeNet_2eproto);
    return ::descriptor_table_SeFNodeNet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBodyFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
  };
  // bytes msg_body = 3;
  void clear_msg_body();
  const std::string& msg_body() const;
  void set_msg_body(const std::string& value);
  void set_msg_body(std::string&& value);
  void set_msg_body(const char* value);
  void set_msg_body(const void* value, size_t size);
  std::string* mutable_msg_body();
  std::string* release_msg_body();
  void set_allocated_msg_body(std::string* msg_body);
  private:
  const std::string& _internal_msg_body() const;
  void _internal_set_msg_body(const std::string& value);
  std::string* _internal_mutable_msg_body();
  public:

  // uint64 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 msg_id = 2;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:WorldToGamePacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_body_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SeFNodeNet_2eproto;
};
// -------------------------------------------------------------------

class LoginToWorldPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginToWorldPacket) */ {
 public:
  LoginToWorldPacket();
  virtual ~LoginToWorldPacket();

  LoginToWorldPacket(const LoginToWorldPacket& from);
  LoginToWorldPacket(LoginToWorldPacket&& from) noexcept
    : LoginToWorldPacket() {
    *this = ::std::move(from);
  }

  inline LoginToWorldPacket& operator=(const LoginToWorldPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginToWorldPacket& operator=(LoginToWorldPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginToWorldPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginToWorldPacket* internal_default_instance() {
    return reinterpret_cast<const LoginToWorldPacket*>(
               &_LoginToWorldPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(LoginToWorldPacket& a, LoginToWorldPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginToWorldPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginToWorldPacket* New() const final {
    return CreateMaybeMessage<LoginToWorldPacket>(nullptr);
  }

  LoginToWorldPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginToWorldPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginToWorldPacket& from);
  void MergeFrom(const LoginToWorldPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginToWorldPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginToWorldPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SeFNodeNet_2eproto);
    return ::descriptor_table_SeFNodeNet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBodyFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
  };
  // bytes msg_body = 3;
  void clear_msg_body();
  const std::string& msg_body() const;
  void set_msg_body(const std::string& value);
  void set_msg_body(std::string&& value);
  void set_msg_body(const char* value);
  void set_msg_body(const void* value, size_t size);
  std::string* mutable_msg_body();
  std::string* release_msg_body();
  void set_allocated_msg_body(std::string* msg_body);
  private:
  const std::string& _internal_msg_body() const;
  void _internal_set_msg_body(const std::string& value);
  std::string* _internal_mutable_msg_body();
  public:

  // uint64 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 msg_id = 2;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LoginToWorldPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_body_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SeFNodeNet_2eproto;
};
// -------------------------------------------------------------------

class WorldToLoginPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorldToLoginPacket) */ {
 public:
  WorldToLoginPacket();
  virtual ~WorldToLoginPacket();

  WorldToLoginPacket(const WorldToLoginPacket& from);
  WorldToLoginPacket(WorldToLoginPacket&& from) noexcept
    : WorldToLoginPacket() {
    *this = ::std::move(from);
  }

  inline WorldToLoginPacket& operator=(const WorldToLoginPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldToLoginPacket& operator=(WorldToLoginPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorldToLoginPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldToLoginPacket* internal_default_instance() {
    return reinterpret_cast<const WorldToLoginPacket*>(
               &_WorldToLoginPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(WorldToLoginPacket& a, WorldToLoginPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldToLoginPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorldToLoginPacket* New() const final {
    return CreateMaybeMessage<WorldToLoginPacket>(nullptr);
  }

  WorldToLoginPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorldToLoginPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorldToLoginPacket& from);
  void MergeFrom(const WorldToLoginPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldToLoginPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WorldToLoginPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SeFNodeNet_2eproto);
    return ::descriptor_table_SeFNodeNet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBodyFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
  };
  // bytes msg_body = 3;
  void clear_msg_body();
  const std::string& msg_body() const;
  void set_msg_body(const std::string& value);
  void set_msg_body(std::string&& value);
  void set_msg_body(const char* value);
  void set_msg_body(const void* value, size_t size);
  std::string* mutable_msg_body();
  std::string* release_msg_body();
  void set_allocated_msg_body(std::string* msg_body);
  private:
  const std::string& _internal_msg_body() const;
  void _internal_set_msg_body(const std::string& value);
  std::string* _internal_mutable_msg_body();
  public:

  // uint64 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 msg_id = 2;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:WorldToLoginPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_body_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SeFNodeNet_2eproto;
};
// -------------------------------------------------------------------

class WorldToDBPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorldToDBPacket) */ {
 public:
  WorldToDBPacket();
  virtual ~WorldToDBPacket();

  WorldToDBPacket(const WorldToDBPacket& from);
  WorldToDBPacket(WorldToDBPacket&& from) noexcept
    : WorldToDBPacket() {
    *this = ::std::move(from);
  }

  inline WorldToDBPacket& operator=(const WorldToDBPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldToDBPacket& operator=(WorldToDBPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorldToDBPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldToDBPacket* internal_default_instance() {
    return reinterpret_cast<const WorldToDBPacket*>(
               &_WorldToDBPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(WorldToDBPacket& a, WorldToDBPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldToDBPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorldToDBPacket* New() const final {
    return CreateMaybeMessage<WorldToDBPacket>(nullptr);
  }

  WorldToDBPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorldToDBPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorldToDBPacket& from);
  void MergeFrom(const WorldToDBPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldToDBPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WorldToDBPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SeFNodeNet_2eproto);
    return ::descriptor_table_SeFNodeNet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBodyFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
  };
  // bytes msg_body = 3;
  void clear_msg_body();
  const std::string& msg_body() const;
  void set_msg_body(const std::string& value);
  void set_msg_body(std::string&& value);
  void set_msg_body(const char* value);
  void set_msg_body(const void* value, size_t size);
  std::string* mutable_msg_body();
  std::string* release_msg_body();
  void set_allocated_msg_body(std::string* msg_body);
  private:
  const std::string& _internal_msg_body() const;
  void _internal_set_msg_body(const std::string& value);
  std::string* _internal_mutable_msg_body();
  public:

  // uint64 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 msg_id = 2;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:WorldToDBPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_body_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SeFNodeNet_2eproto;
};
// -------------------------------------------------------------------

class DBToWorldPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DBToWorldPacket) */ {
 public:
  DBToWorldPacket();
  virtual ~DBToWorldPacket();

  DBToWorldPacket(const DBToWorldPacket& from);
  DBToWorldPacket(DBToWorldPacket&& from) noexcept
    : DBToWorldPacket() {
    *this = ::std::move(from);
  }

  inline DBToWorldPacket& operator=(const DBToWorldPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBToWorldPacket& operator=(DBToWorldPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DBToWorldPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DBToWorldPacket* internal_default_instance() {
    return reinterpret_cast<const DBToWorldPacket*>(
               &_DBToWorldPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DBToWorldPacket& a, DBToWorldPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DBToWorldPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DBToWorldPacket* New() const final {
    return CreateMaybeMessage<DBToWorldPacket>(nullptr);
  }

  DBToWorldPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DBToWorldPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DBToWorldPacket& from);
  void MergeFrom(const DBToWorldPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBToWorldPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DBToWorldPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SeFNodeNet_2eproto);
    return ::descriptor_table_SeFNodeNet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBodyFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
  };
  // bytes msg_body = 3;
  void clear_msg_body();
  const std::string& msg_body() const;
  void set_msg_body(const std::string& value);
  void set_msg_body(std::string&& value);
  void set_msg_body(const char* value);
  void set_msg_body(const void* value, size_t size);
  std::string* mutable_msg_body();
  std::string* release_msg_body();
  void set_allocated_msg_body(std::string* msg_body);
  private:
  const std::string& _internal_msg_body() const;
  void _internal_set_msg_body(const std::string& value);
  std::string* _internal_mutable_msg_body();
  public:

  // uint64 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 msg_id = 2;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DBToWorldPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_body_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SeFNodeNet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerReport

// int32 server_id = 1;
inline void ServerReport::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerReport::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerReport::server_id() const {
  // @@protoc_insertion_point(field_get:ServerReport.server_id)
  return _internal_server_id();
}
inline void ServerReport::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void ServerReport::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:ServerReport.server_id)
}

// bytes server_name = 2;
inline void ServerReport::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerReport::server_name() const {
  // @@protoc_insertion_point(field_get:ServerReport.server_name)
  return _internal_server_name();
}
inline void ServerReport::set_server_name(const std::string& value) {
  _internal_set_server_name(value);
  // @@protoc_insertion_point(field_set:ServerReport.server_name)
}
inline std::string* ServerReport::mutable_server_name() {
  // @@protoc_insertion_point(field_mutable:ServerReport.server_name)
  return _internal_mutable_server_name();
}
inline const std::string& ServerReport::_internal_server_name() const {
  return server_name_.GetNoArena();
}
inline void ServerReport::_internal_set_server_name(const std::string& value) {
  
  server_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServerReport::set_server_name(std::string&& value) {
  
  server_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerReport.server_name)
}
inline void ServerReport::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerReport.server_name)
}
inline void ServerReport::set_server_name(const void* value, size_t size) {
  
  server_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerReport.server_name)
}
inline std::string* ServerReport::_internal_mutable_server_name() {
  
  return server_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerReport::release_server_name() {
  // @@protoc_insertion_point(field_release:ServerReport.server_name)
  
  return server_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerReport::set_allocated_server_name(std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:ServerReport.server_name)
}

// bytes server_ip = 3;
inline void ServerReport::clear_server_ip() {
  server_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerReport::server_ip() const {
  // @@protoc_insertion_point(field_get:ServerReport.server_ip)
  return _internal_server_ip();
}
inline void ServerReport::set_server_ip(const std::string& value) {
  _internal_set_server_ip(value);
  // @@protoc_insertion_point(field_set:ServerReport.server_ip)
}
inline std::string* ServerReport::mutable_server_ip() {
  // @@protoc_insertion_point(field_mutable:ServerReport.server_ip)
  return _internal_mutable_server_ip();
}
inline const std::string& ServerReport::_internal_server_ip() const {
  return server_ip_.GetNoArena();
}
inline void ServerReport::_internal_set_server_ip(const std::string& value) {
  
  server_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServerReport::set_server_ip(std::string&& value) {
  
  server_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerReport.server_ip)
}
inline void ServerReport::set_server_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerReport.server_ip)
}
inline void ServerReport::set_server_ip(const void* value, size_t size) {
  
  server_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerReport.server_ip)
}
inline std::string* ServerReport::_internal_mutable_server_ip() {
  
  return server_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerReport::release_server_ip() {
  // @@protoc_insertion_point(field_release:ServerReport.server_ip)
  
  return server_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerReport::set_allocated_server_ip(std::string* server_ip) {
  if (server_ip != nullptr) {
    
  } else {
    
  }
  server_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_ip);
  // @@protoc_insertion_point(field_set_allocated:ServerReport.server_ip)
}

// int32 server_port = 4;
inline void ServerReport::clear_server_port() {
  server_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerReport::_internal_server_port() const {
  return server_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerReport::server_port() const {
  // @@protoc_insertion_point(field_get:ServerReport.server_port)
  return _internal_server_port();
}
inline void ServerReport::_internal_set_server_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_port_ = value;
}
inline void ServerReport::set_server_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_port(value);
  // @@protoc_insertion_point(field_set:ServerReport.server_port)
}

// int32 server_max_online = 5;
inline void ServerReport::clear_server_max_online() {
  server_max_online_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerReport::_internal_server_max_online() const {
  return server_max_online_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerReport::server_max_online() const {
  // @@protoc_insertion_point(field_get:ServerReport.server_max_online)
  return _internal_server_max_online();
}
inline void ServerReport::_internal_set_server_max_online(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_max_online_ = value;
}
inline void ServerReport::set_server_max_online(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_max_online(value);
  // @@protoc_insertion_point(field_set:ServerReport.server_max_online)
}

// int32 server_cur_count = 6;
inline void ServerReport::clear_server_cur_count() {
  server_cur_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerReport::_internal_server_cur_count() const {
  return server_cur_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerReport::server_cur_count() const {
  // @@protoc_insertion_point(field_get:ServerReport.server_cur_count)
  return _internal_server_cur_count();
}
inline void ServerReport::_internal_set_server_cur_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_cur_count_ = value;
}
inline void ServerReport::set_server_cur_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_cur_count(value);
  // @@protoc_insertion_point(field_set:ServerReport.server_cur_count)
}

// .EServerState server_state = 7;
inline void ServerReport::clear_server_state() {
  server_state_ = 0;
}
inline ::EServerState ServerReport::_internal_server_state() const {
  return static_cast< ::EServerState >(server_state_);
}
inline ::EServerState ServerReport::server_state() const {
  // @@protoc_insertion_point(field_get:ServerReport.server_state)
  return _internal_server_state();
}
inline void ServerReport::_internal_set_server_state(::EServerState value) {
  
  server_state_ = value;
}
inline void ServerReport::set_server_state(::EServerState value) {
  _internal_set_server_state(value);
  // @@protoc_insertion_point(field_set:ServerReport.server_state)
}

// int32 server_type = 8;
inline void ServerReport::clear_server_type() {
  server_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerReport::_internal_server_type() const {
  return server_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerReport::server_type() const {
  // @@protoc_insertion_point(field_get:ServerReport.server_type)
  return _internal_server_type();
}
inline void ServerReport::_internal_set_server_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_type_ = value;
}
inline void ServerReport::set_server_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_type(value);
  // @@protoc_insertion_point(field_set:ServerReport.server_type)
}

// -------------------------------------------------------------------

// ServerReportList

// repeated .ServerReport server_info = 1;
inline int ServerReportList::_internal_server_info_size() const {
  return server_info_.size();
}
inline int ServerReportList::server_info_size() const {
  return _internal_server_info_size();
}
inline void ServerReportList::clear_server_info() {
  server_info_.Clear();
}
inline ::ServerReport* ServerReportList::mutable_server_info(int index) {
  // @@protoc_insertion_point(field_mutable:ServerReportList.server_info)
  return server_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerReport >*
ServerReportList::mutable_server_info() {
  // @@protoc_insertion_point(field_mutable_list:ServerReportList.server_info)
  return &server_info_;
}
inline const ::ServerReport& ServerReportList::_internal_server_info(int index) const {
  return server_info_.Get(index);
}
inline const ::ServerReport& ServerReportList::server_info(int index) const {
  // @@protoc_insertion_point(field_get:ServerReportList.server_info)
  return _internal_server_info(index);
}
inline ::ServerReport* ServerReportList::_internal_add_server_info() {
  return server_info_.Add();
}
inline ::ServerReport* ServerReportList::add_server_info() {
  // @@protoc_insertion_point(field_add:ServerReportList.server_info)
  return _internal_add_server_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerReport >&
ServerReportList::server_info() const {
  // @@protoc_insertion_point(field_list:ServerReportList.server_info)
  return server_info_;
}

// -------------------------------------------------------------------

// ServerHeartBeat

// int32 count = 1;
inline void ServerHeartBeat::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerHeartBeat::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerHeartBeat::count() const {
  // @@protoc_insertion_point(field_get:ServerHeartBeat.count)
  return _internal_count();
}
inline void ServerHeartBeat::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void ServerHeartBeat::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:ServerHeartBeat.count)
}

// -------------------------------------------------------------------

// NodeToMasterPacket

// .ServerReport server_info = 1;
inline bool NodeToMasterPacket::_internal_has_server_info() const {
  return this != internal_default_instance() && server_info_ != nullptr;
}
inline bool NodeToMasterPacket::has_server_info() const {
  return _internal_has_server_info();
}
inline void NodeToMasterPacket::clear_server_info() {
  if (GetArenaNoVirtual() == nullptr && server_info_ != nullptr) {
    delete server_info_;
  }
  server_info_ = nullptr;
}
inline const ::ServerReport& NodeToMasterPacket::_internal_server_info() const {
  const ::ServerReport* p = server_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ServerReport*>(
      &::_ServerReport_default_instance_);
}
inline const ::ServerReport& NodeToMasterPacket::server_info() const {
  // @@protoc_insertion_point(field_get:NodeToMasterPacket.server_info)
  return _internal_server_info();
}
inline ::ServerReport* NodeToMasterPacket::release_server_info() {
  // @@protoc_insertion_point(field_release:NodeToMasterPacket.server_info)
  
  ::ServerReport* temp = server_info_;
  server_info_ = nullptr;
  return temp;
}
inline ::ServerReport* NodeToMasterPacket::_internal_mutable_server_info() {
  
  if (server_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ServerReport>(GetArenaNoVirtual());
    server_info_ = p;
  }
  return server_info_;
}
inline ::ServerReport* NodeToMasterPacket::mutable_server_info() {
  // @@protoc_insertion_point(field_mutable:NodeToMasterPacket.server_info)
  return _internal_mutable_server_info();
}
inline void NodeToMasterPacket::set_allocated_server_info(::ServerReport* server_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete server_info_;
  }
  if (server_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      server_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_info, submessage_arena);
    }
    
  } else {
    
  }
  server_info_ = server_info;
  // @@protoc_insertion_point(field_set_allocated:NodeToMasterPacket.server_info)
}

// -------------------------------------------------------------------

// MasterToNodePacket

// int32 result = 1;
inline void MasterToNodePacket::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MasterToNodePacket::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MasterToNodePacket::result() const {
  // @@protoc_insertion_point(field_get:MasterToNodePacket.result)
  return _internal_result();
}
inline void MasterToNodePacket::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void MasterToNodePacket::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:MasterToNodePacket.result)
}

// -------------------------------------------------------------------

// GateToLoginPacket

// uint64 player_id = 1;
inline void GateToLoginPacket::clear_player_id() {
  player_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GateToLoginPacket::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GateToLoginPacket::player_id() const {
  // @@protoc_insertion_point(field_get:GateToLoginPacket.player_id)
  return _internal_player_id();
}
inline void GateToLoginPacket::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_id_ = value;
}
inline void GateToLoginPacket::set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:GateToLoginPacket.player_id)
}

// int32 msg_id = 2;
inline void GateToLoginPacket::clear_msg_id() {
  msg_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GateToLoginPacket::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GateToLoginPacket::msg_id() const {
  // @@protoc_insertion_point(field_get:GateToLoginPacket.msg_id)
  return _internal_msg_id();
}
inline void GateToLoginPacket::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_id_ = value;
}
inline void GateToLoginPacket::set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:GateToLoginPacket.msg_id)
}

// bytes msg_body = 3;
inline void GateToLoginPacket::clear_msg_body() {
  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GateToLoginPacket::msg_body() const {
  // @@protoc_insertion_point(field_get:GateToLoginPacket.msg_body)
  return _internal_msg_body();
}
inline void GateToLoginPacket::set_msg_body(const std::string& value) {
  _internal_set_msg_body(value);
  // @@protoc_insertion_point(field_set:GateToLoginPacket.msg_body)
}
inline std::string* GateToLoginPacket::mutable_msg_body() {
  // @@protoc_insertion_point(field_mutable:GateToLoginPacket.msg_body)
  return _internal_mutable_msg_body();
}
inline const std::string& GateToLoginPacket::_internal_msg_body() const {
  return msg_body_.GetNoArena();
}
inline void GateToLoginPacket::_internal_set_msg_body(const std::string& value) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GateToLoginPacket::set_msg_body(std::string&& value) {
  
  msg_body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GateToLoginPacket.msg_body)
}
inline void GateToLoginPacket::set_msg_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GateToLoginPacket.msg_body)
}
inline void GateToLoginPacket::set_msg_body(const void* value, size_t size) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GateToLoginPacket.msg_body)
}
inline std::string* GateToLoginPacket::_internal_mutable_msg_body() {
  
  return msg_body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GateToLoginPacket::release_msg_body() {
  // @@protoc_insertion_point(field_release:GateToLoginPacket.msg_body)
  
  return msg_body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GateToLoginPacket::set_allocated_msg_body(std::string* msg_body) {
  if (msg_body != nullptr) {
    
  } else {
    
  }
  msg_body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_body);
  // @@protoc_insertion_point(field_set_allocated:GateToLoginPacket.msg_body)
}

// -------------------------------------------------------------------

// LoginToGatePacket

// uint64 player_id = 1;
inline void LoginToGatePacket::clear_player_id() {
  player_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoginToGatePacket::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoginToGatePacket::player_id() const {
  // @@protoc_insertion_point(field_get:LoginToGatePacket.player_id)
  return _internal_player_id();
}
inline void LoginToGatePacket::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_id_ = value;
}
inline void LoginToGatePacket::set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:LoginToGatePacket.player_id)
}

// int32 msg_id = 2;
inline void LoginToGatePacket::clear_msg_id() {
  msg_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginToGatePacket::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginToGatePacket::msg_id() const {
  // @@protoc_insertion_point(field_get:LoginToGatePacket.msg_id)
  return _internal_msg_id();
}
inline void LoginToGatePacket::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_id_ = value;
}
inline void LoginToGatePacket::set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:LoginToGatePacket.msg_id)
}

// bytes msg_body = 3;
inline void LoginToGatePacket::clear_msg_body() {
  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginToGatePacket::msg_body() const {
  // @@protoc_insertion_point(field_get:LoginToGatePacket.msg_body)
  return _internal_msg_body();
}
inline void LoginToGatePacket::set_msg_body(const std::string& value) {
  _internal_set_msg_body(value);
  // @@protoc_insertion_point(field_set:LoginToGatePacket.msg_body)
}
inline std::string* LoginToGatePacket::mutable_msg_body() {
  // @@protoc_insertion_point(field_mutable:LoginToGatePacket.msg_body)
  return _internal_mutable_msg_body();
}
inline const std::string& LoginToGatePacket::_internal_msg_body() const {
  return msg_body_.GetNoArena();
}
inline void LoginToGatePacket::_internal_set_msg_body(const std::string& value) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginToGatePacket::set_msg_body(std::string&& value) {
  
  msg_body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginToGatePacket.msg_body)
}
inline void LoginToGatePacket::set_msg_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginToGatePacket.msg_body)
}
inline void LoginToGatePacket::set_msg_body(const void* value, size_t size) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginToGatePacket.msg_body)
}
inline std::string* LoginToGatePacket::_internal_mutable_msg_body() {
  
  return msg_body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginToGatePacket::release_msg_body() {
  // @@protoc_insertion_point(field_release:LoginToGatePacket.msg_body)
  
  return msg_body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginToGatePacket::set_allocated_msg_body(std::string* msg_body) {
  if (msg_body != nullptr) {
    
  } else {
    
  }
  msg_body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_body);
  // @@protoc_insertion_point(field_set_allocated:LoginToGatePacket.msg_body)
}

// -------------------------------------------------------------------

// GateToGamePacket

// uint64 player_id = 1;
inline void GateToGamePacket::clear_player_id() {
  player_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GateToGamePacket::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GateToGamePacket::player_id() const {
  // @@protoc_insertion_point(field_get:GateToGamePacket.player_id)
  return _internal_player_id();
}
inline void GateToGamePacket::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_id_ = value;
}
inline void GateToGamePacket::set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:GateToGamePacket.player_id)
}

// int32 msg_id = 2;
inline void GateToGamePacket::clear_msg_id() {
  msg_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GateToGamePacket::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GateToGamePacket::msg_id() const {
  // @@protoc_insertion_point(field_get:GateToGamePacket.msg_id)
  return _internal_msg_id();
}
inline void GateToGamePacket::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_id_ = value;
}
inline void GateToGamePacket::set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:GateToGamePacket.msg_id)
}

// bytes msg_body = 3;
inline void GateToGamePacket::clear_msg_body() {
  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GateToGamePacket::msg_body() const {
  // @@protoc_insertion_point(field_get:GateToGamePacket.msg_body)
  return _internal_msg_body();
}
inline void GateToGamePacket::set_msg_body(const std::string& value) {
  _internal_set_msg_body(value);
  // @@protoc_insertion_point(field_set:GateToGamePacket.msg_body)
}
inline std::string* GateToGamePacket::mutable_msg_body() {
  // @@protoc_insertion_point(field_mutable:GateToGamePacket.msg_body)
  return _internal_mutable_msg_body();
}
inline const std::string& GateToGamePacket::_internal_msg_body() const {
  return msg_body_.GetNoArena();
}
inline void GateToGamePacket::_internal_set_msg_body(const std::string& value) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GateToGamePacket::set_msg_body(std::string&& value) {
  
  msg_body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GateToGamePacket.msg_body)
}
inline void GateToGamePacket::set_msg_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GateToGamePacket.msg_body)
}
inline void GateToGamePacket::set_msg_body(const void* value, size_t size) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GateToGamePacket.msg_body)
}
inline std::string* GateToGamePacket::_internal_mutable_msg_body() {
  
  return msg_body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GateToGamePacket::release_msg_body() {
  // @@protoc_insertion_point(field_release:GateToGamePacket.msg_body)
  
  return msg_body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GateToGamePacket::set_allocated_msg_body(std::string* msg_body) {
  if (msg_body != nullptr) {
    
  } else {
    
  }
  msg_body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_body);
  // @@protoc_insertion_point(field_set_allocated:GateToGamePacket.msg_body)
}

// -------------------------------------------------------------------

// GameToGatePacket

// uint64 player_id = 1;
inline void GameToGatePacket::clear_player_id() {
  player_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameToGatePacket::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameToGatePacket::player_id() const {
  // @@protoc_insertion_point(field_get:GameToGatePacket.player_id)
  return _internal_player_id();
}
inline void GameToGatePacket::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_id_ = value;
}
inline void GameToGatePacket::set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:GameToGatePacket.player_id)
}

// int32 msg_id = 2;
inline void GameToGatePacket::clear_msg_id() {
  msg_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameToGatePacket::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameToGatePacket::msg_id() const {
  // @@protoc_insertion_point(field_get:GameToGatePacket.msg_id)
  return _internal_msg_id();
}
inline void GameToGatePacket::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_id_ = value;
}
inline void GameToGatePacket::set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:GameToGatePacket.msg_id)
}

// bytes msg_body = 3;
inline void GameToGatePacket::clear_msg_body() {
  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameToGatePacket::msg_body() const {
  // @@protoc_insertion_point(field_get:GameToGatePacket.msg_body)
  return _internal_msg_body();
}
inline void GameToGatePacket::set_msg_body(const std::string& value) {
  _internal_set_msg_body(value);
  // @@protoc_insertion_point(field_set:GameToGatePacket.msg_body)
}
inline std::string* GameToGatePacket::mutable_msg_body() {
  // @@protoc_insertion_point(field_mutable:GameToGatePacket.msg_body)
  return _internal_mutable_msg_body();
}
inline const std::string& GameToGatePacket::_internal_msg_body() const {
  return msg_body_.GetNoArena();
}
inline void GameToGatePacket::_internal_set_msg_body(const std::string& value) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GameToGatePacket::set_msg_body(std::string&& value) {
  
  msg_body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameToGatePacket.msg_body)
}
inline void GameToGatePacket::set_msg_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameToGatePacket.msg_body)
}
inline void GameToGatePacket::set_msg_body(const void* value, size_t size) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameToGatePacket.msg_body)
}
inline std::string* GameToGatePacket::_internal_mutable_msg_body() {
  
  return msg_body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameToGatePacket::release_msg_body() {
  // @@protoc_insertion_point(field_release:GameToGatePacket.msg_body)
  
  return msg_body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameToGatePacket::set_allocated_msg_body(std::string* msg_body) {
  if (msg_body != nullptr) {
    
  } else {
    
  }
  msg_body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_body);
  // @@protoc_insertion_point(field_set_allocated:GameToGatePacket.msg_body)
}

// -------------------------------------------------------------------

// GateToChatPacket

// uint64 player_id = 1;
inline void GateToChatPacket::clear_player_id() {
  player_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GateToChatPacket::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GateToChatPacket::player_id() const {
  // @@protoc_insertion_point(field_get:GateToChatPacket.player_id)
  return _internal_player_id();
}
inline void GateToChatPacket::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_id_ = value;
}
inline void GateToChatPacket::set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:GateToChatPacket.player_id)
}

// int32 msg_id = 2;
inline void GateToChatPacket::clear_msg_id() {
  msg_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GateToChatPacket::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GateToChatPacket::msg_id() const {
  // @@protoc_insertion_point(field_get:GateToChatPacket.msg_id)
  return _internal_msg_id();
}
inline void GateToChatPacket::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_id_ = value;
}
inline void GateToChatPacket::set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:GateToChatPacket.msg_id)
}

// bytes msg_body = 3;
inline void GateToChatPacket::clear_msg_body() {
  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GateToChatPacket::msg_body() const {
  // @@protoc_insertion_point(field_get:GateToChatPacket.msg_body)
  return _internal_msg_body();
}
inline void GateToChatPacket::set_msg_body(const std::string& value) {
  _internal_set_msg_body(value);
  // @@protoc_insertion_point(field_set:GateToChatPacket.msg_body)
}
inline std::string* GateToChatPacket::mutable_msg_body() {
  // @@protoc_insertion_point(field_mutable:GateToChatPacket.msg_body)
  return _internal_mutable_msg_body();
}
inline const std::string& GateToChatPacket::_internal_msg_body() const {
  return msg_body_.GetNoArena();
}
inline void GateToChatPacket::_internal_set_msg_body(const std::string& value) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GateToChatPacket::set_msg_body(std::string&& value) {
  
  msg_body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GateToChatPacket.msg_body)
}
inline void GateToChatPacket::set_msg_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GateToChatPacket.msg_body)
}
inline void GateToChatPacket::set_msg_body(const void* value, size_t size) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GateToChatPacket.msg_body)
}
inline std::string* GateToChatPacket::_internal_mutable_msg_body() {
  
  return msg_body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GateToChatPacket::release_msg_body() {
  // @@protoc_insertion_point(field_release:GateToChatPacket.msg_body)
  
  return msg_body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GateToChatPacket::set_allocated_msg_body(std::string* msg_body) {
  if (msg_body != nullptr) {
    
  } else {
    
  }
  msg_body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_body);
  // @@protoc_insertion_point(field_set_allocated:GateToChatPacket.msg_body)
}

// -------------------------------------------------------------------

// ChatToGatePacket

// uint64 player_id = 1;
inline void ChatToGatePacket::clear_player_id() {
  player_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChatToGatePacket::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChatToGatePacket::player_id() const {
  // @@protoc_insertion_point(field_get:ChatToGatePacket.player_id)
  return _internal_player_id();
}
inline void ChatToGatePacket::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_id_ = value;
}
inline void ChatToGatePacket::set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:ChatToGatePacket.player_id)
}

// int32 msg_id = 2;
inline void ChatToGatePacket::clear_msg_id() {
  msg_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatToGatePacket::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatToGatePacket::msg_id() const {
  // @@protoc_insertion_point(field_get:ChatToGatePacket.msg_id)
  return _internal_msg_id();
}
inline void ChatToGatePacket::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_id_ = value;
}
inline void ChatToGatePacket::set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:ChatToGatePacket.msg_id)
}

// bytes msg_body = 3;
inline void ChatToGatePacket::clear_msg_body() {
  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChatToGatePacket::msg_body() const {
  // @@protoc_insertion_point(field_get:ChatToGatePacket.msg_body)
  return _internal_msg_body();
}
inline void ChatToGatePacket::set_msg_body(const std::string& value) {
  _internal_set_msg_body(value);
  // @@protoc_insertion_point(field_set:ChatToGatePacket.msg_body)
}
inline std::string* ChatToGatePacket::mutable_msg_body() {
  // @@protoc_insertion_point(field_mutable:ChatToGatePacket.msg_body)
  return _internal_mutable_msg_body();
}
inline const std::string& ChatToGatePacket::_internal_msg_body() const {
  return msg_body_.GetNoArena();
}
inline void ChatToGatePacket::_internal_set_msg_body(const std::string& value) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChatToGatePacket::set_msg_body(std::string&& value) {
  
  msg_body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatToGatePacket.msg_body)
}
inline void ChatToGatePacket::set_msg_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatToGatePacket.msg_body)
}
inline void ChatToGatePacket::set_msg_body(const void* value, size_t size) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatToGatePacket.msg_body)
}
inline std::string* ChatToGatePacket::_internal_mutable_msg_body() {
  
  return msg_body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChatToGatePacket::release_msg_body() {
  // @@protoc_insertion_point(field_release:ChatToGatePacket.msg_body)
  
  return msg_body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChatToGatePacket::set_allocated_msg_body(std::string* msg_body) {
  if (msg_body != nullptr) {
    
  } else {
    
  }
  msg_body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_body);
  // @@protoc_insertion_point(field_set_allocated:ChatToGatePacket.msg_body)
}

// -------------------------------------------------------------------

// WorldToGatePacket

// uint64 player_id = 1;
inline void WorldToGatePacket::clear_player_id() {
  player_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WorldToGatePacket::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WorldToGatePacket::player_id() const {
  // @@protoc_insertion_point(field_get:WorldToGatePacket.player_id)
  return _internal_player_id();
}
inline void WorldToGatePacket::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_id_ = value;
}
inline void WorldToGatePacket::set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:WorldToGatePacket.player_id)
}

// int32 msg_id = 2;
inline void WorldToGatePacket::clear_msg_id() {
  msg_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldToGatePacket::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldToGatePacket::msg_id() const {
  // @@protoc_insertion_point(field_get:WorldToGatePacket.msg_id)
  return _internal_msg_id();
}
inline void WorldToGatePacket::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_id_ = value;
}
inline void WorldToGatePacket::set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:WorldToGatePacket.msg_id)
}

// bytes msg_body = 3;
inline void WorldToGatePacket::clear_msg_body() {
  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorldToGatePacket::msg_body() const {
  // @@protoc_insertion_point(field_get:WorldToGatePacket.msg_body)
  return _internal_msg_body();
}
inline void WorldToGatePacket::set_msg_body(const std::string& value) {
  _internal_set_msg_body(value);
  // @@protoc_insertion_point(field_set:WorldToGatePacket.msg_body)
}
inline std::string* WorldToGatePacket::mutable_msg_body() {
  // @@protoc_insertion_point(field_mutable:WorldToGatePacket.msg_body)
  return _internal_mutable_msg_body();
}
inline const std::string& WorldToGatePacket::_internal_msg_body() const {
  return msg_body_.GetNoArena();
}
inline void WorldToGatePacket::_internal_set_msg_body(const std::string& value) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WorldToGatePacket::set_msg_body(std::string&& value) {
  
  msg_body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WorldToGatePacket.msg_body)
}
inline void WorldToGatePacket::set_msg_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WorldToGatePacket.msg_body)
}
inline void WorldToGatePacket::set_msg_body(const void* value, size_t size) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WorldToGatePacket.msg_body)
}
inline std::string* WorldToGatePacket::_internal_mutable_msg_body() {
  
  return msg_body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorldToGatePacket::release_msg_body() {
  // @@protoc_insertion_point(field_release:WorldToGatePacket.msg_body)
  
  return msg_body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorldToGatePacket::set_allocated_msg_body(std::string* msg_body) {
  if (msg_body != nullptr) {
    
  } else {
    
  }
  msg_body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_body);
  // @@protoc_insertion_point(field_set_allocated:WorldToGatePacket.msg_body)
}

// -------------------------------------------------------------------

// GateToWorldPacket

// uint64 player_id = 1;
inline void GateToWorldPacket::clear_player_id() {
  player_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GateToWorldPacket::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GateToWorldPacket::player_id() const {
  // @@protoc_insertion_point(field_get:GateToWorldPacket.player_id)
  return _internal_player_id();
}
inline void GateToWorldPacket::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_id_ = value;
}
inline void GateToWorldPacket::set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:GateToWorldPacket.player_id)
}

// int32 msg_id = 2;
inline void GateToWorldPacket::clear_msg_id() {
  msg_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GateToWorldPacket::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GateToWorldPacket::msg_id() const {
  // @@protoc_insertion_point(field_get:GateToWorldPacket.msg_id)
  return _internal_msg_id();
}
inline void GateToWorldPacket::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_id_ = value;
}
inline void GateToWorldPacket::set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:GateToWorldPacket.msg_id)
}

// bytes msg_body = 3;
inline void GateToWorldPacket::clear_msg_body() {
  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GateToWorldPacket::msg_body() const {
  // @@protoc_insertion_point(field_get:GateToWorldPacket.msg_body)
  return _internal_msg_body();
}
inline void GateToWorldPacket::set_msg_body(const std::string& value) {
  _internal_set_msg_body(value);
  // @@protoc_insertion_point(field_set:GateToWorldPacket.msg_body)
}
inline std::string* GateToWorldPacket::mutable_msg_body() {
  // @@protoc_insertion_point(field_mutable:GateToWorldPacket.msg_body)
  return _internal_mutable_msg_body();
}
inline const std::string& GateToWorldPacket::_internal_msg_body() const {
  return msg_body_.GetNoArena();
}
inline void GateToWorldPacket::_internal_set_msg_body(const std::string& value) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GateToWorldPacket::set_msg_body(std::string&& value) {
  
  msg_body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GateToWorldPacket.msg_body)
}
inline void GateToWorldPacket::set_msg_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GateToWorldPacket.msg_body)
}
inline void GateToWorldPacket::set_msg_body(const void* value, size_t size) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GateToWorldPacket.msg_body)
}
inline std::string* GateToWorldPacket::_internal_mutable_msg_body() {
  
  return msg_body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GateToWorldPacket::release_msg_body() {
  // @@protoc_insertion_point(field_release:GateToWorldPacket.msg_body)
  
  return msg_body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GateToWorldPacket::set_allocated_msg_body(std::string* msg_body) {
  if (msg_body != nullptr) {
    
  } else {
    
  }
  msg_body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_body);
  // @@protoc_insertion_point(field_set_allocated:GateToWorldPacket.msg_body)
}

// -------------------------------------------------------------------

// GameToChatPacket

// uint64 player_id = 1;
inline void GameToChatPacket::clear_player_id() {
  player_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameToChatPacket::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameToChatPacket::player_id() const {
  // @@protoc_insertion_point(field_get:GameToChatPacket.player_id)
  return _internal_player_id();
}
inline void GameToChatPacket::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_id_ = value;
}
inline void GameToChatPacket::set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:GameToChatPacket.player_id)
}

// int32 msg_id = 2;
inline void GameToChatPacket::clear_msg_id() {
  msg_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameToChatPacket::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameToChatPacket::msg_id() const {
  // @@protoc_insertion_point(field_get:GameToChatPacket.msg_id)
  return _internal_msg_id();
}
inline void GameToChatPacket::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_id_ = value;
}
inline void GameToChatPacket::set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:GameToChatPacket.msg_id)
}

// bytes msg_body = 3;
inline void GameToChatPacket::clear_msg_body() {
  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameToChatPacket::msg_body() const {
  // @@protoc_insertion_point(field_get:GameToChatPacket.msg_body)
  return _internal_msg_body();
}
inline void GameToChatPacket::set_msg_body(const std::string& value) {
  _internal_set_msg_body(value);
  // @@protoc_insertion_point(field_set:GameToChatPacket.msg_body)
}
inline std::string* GameToChatPacket::mutable_msg_body() {
  // @@protoc_insertion_point(field_mutable:GameToChatPacket.msg_body)
  return _internal_mutable_msg_body();
}
inline const std::string& GameToChatPacket::_internal_msg_body() const {
  return msg_body_.GetNoArena();
}
inline void GameToChatPacket::_internal_set_msg_body(const std::string& value) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GameToChatPacket::set_msg_body(std::string&& value) {
  
  msg_body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameToChatPacket.msg_body)
}
inline void GameToChatPacket::set_msg_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameToChatPacket.msg_body)
}
inline void GameToChatPacket::set_msg_body(const void* value, size_t size) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameToChatPacket.msg_body)
}
inline std::string* GameToChatPacket::_internal_mutable_msg_body() {
  
  return msg_body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameToChatPacket::release_msg_body() {
  // @@protoc_insertion_point(field_release:GameToChatPacket.msg_body)
  
  return msg_body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameToChatPacket::set_allocated_msg_body(std::string* msg_body) {
  if (msg_body != nullptr) {
    
  } else {
    
  }
  msg_body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_body);
  // @@protoc_insertion_point(field_set_allocated:GameToChatPacket.msg_body)
}

// -------------------------------------------------------------------

// ChatToGamePacket

// uint64 player_id = 1;
inline void ChatToGamePacket::clear_player_id() {
  player_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChatToGamePacket::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChatToGamePacket::player_id() const {
  // @@protoc_insertion_point(field_get:ChatToGamePacket.player_id)
  return _internal_player_id();
}
inline void ChatToGamePacket::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_id_ = value;
}
inline void ChatToGamePacket::set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:ChatToGamePacket.player_id)
}

// int32 msg_id = 2;
inline void ChatToGamePacket::clear_msg_id() {
  msg_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatToGamePacket::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatToGamePacket::msg_id() const {
  // @@protoc_insertion_point(field_get:ChatToGamePacket.msg_id)
  return _internal_msg_id();
}
inline void ChatToGamePacket::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_id_ = value;
}
inline void ChatToGamePacket::set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:ChatToGamePacket.msg_id)
}

// bytes msg_body = 3;
inline void ChatToGamePacket::clear_msg_body() {
  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChatToGamePacket::msg_body() const {
  // @@protoc_insertion_point(field_get:ChatToGamePacket.msg_body)
  return _internal_msg_body();
}
inline void ChatToGamePacket::set_msg_body(const std::string& value) {
  _internal_set_msg_body(value);
  // @@protoc_insertion_point(field_set:ChatToGamePacket.msg_body)
}
inline std::string* ChatToGamePacket::mutable_msg_body() {
  // @@protoc_insertion_point(field_mutable:ChatToGamePacket.msg_body)
  return _internal_mutable_msg_body();
}
inline const std::string& ChatToGamePacket::_internal_msg_body() const {
  return msg_body_.GetNoArena();
}
inline void ChatToGamePacket::_internal_set_msg_body(const std::string& value) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChatToGamePacket::set_msg_body(std::string&& value) {
  
  msg_body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatToGamePacket.msg_body)
}
inline void ChatToGamePacket::set_msg_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatToGamePacket.msg_body)
}
inline void ChatToGamePacket::set_msg_body(const void* value, size_t size) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatToGamePacket.msg_body)
}
inline std::string* ChatToGamePacket::_internal_mutable_msg_body() {
  
  return msg_body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChatToGamePacket::release_msg_body() {
  // @@protoc_insertion_point(field_release:ChatToGamePacket.msg_body)
  
  return msg_body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChatToGamePacket::set_allocated_msg_body(std::string* msg_body) {
  if (msg_body != nullptr) {
    
  } else {
    
  }
  msg_body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_body);
  // @@protoc_insertion_point(field_set_allocated:ChatToGamePacket.msg_body)
}

// -------------------------------------------------------------------

// GameToWorldPacket

// uint64 player_id = 1;
inline void GameToWorldPacket::clear_player_id() {
  player_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameToWorldPacket::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameToWorldPacket::player_id() const {
  // @@protoc_insertion_point(field_get:GameToWorldPacket.player_id)
  return _internal_player_id();
}
inline void GameToWorldPacket::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_id_ = value;
}
inline void GameToWorldPacket::set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:GameToWorldPacket.player_id)
}

// int32 msg_id = 2;
inline void GameToWorldPacket::clear_msg_id() {
  msg_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameToWorldPacket::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameToWorldPacket::msg_id() const {
  // @@protoc_insertion_point(field_get:GameToWorldPacket.msg_id)
  return _internal_msg_id();
}
inline void GameToWorldPacket::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_id_ = value;
}
inline void GameToWorldPacket::set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:GameToWorldPacket.msg_id)
}

// bytes msg_body = 3;
inline void GameToWorldPacket::clear_msg_body() {
  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameToWorldPacket::msg_body() const {
  // @@protoc_insertion_point(field_get:GameToWorldPacket.msg_body)
  return _internal_msg_body();
}
inline void GameToWorldPacket::set_msg_body(const std::string& value) {
  _internal_set_msg_body(value);
  // @@protoc_insertion_point(field_set:GameToWorldPacket.msg_body)
}
inline std::string* GameToWorldPacket::mutable_msg_body() {
  // @@protoc_insertion_point(field_mutable:GameToWorldPacket.msg_body)
  return _internal_mutable_msg_body();
}
inline const std::string& GameToWorldPacket::_internal_msg_body() const {
  return msg_body_.GetNoArena();
}
inline void GameToWorldPacket::_internal_set_msg_body(const std::string& value) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GameToWorldPacket::set_msg_body(std::string&& value) {
  
  msg_body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameToWorldPacket.msg_body)
}
inline void GameToWorldPacket::set_msg_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameToWorldPacket.msg_body)
}
inline void GameToWorldPacket::set_msg_body(const void* value, size_t size) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameToWorldPacket.msg_body)
}
inline std::string* GameToWorldPacket::_internal_mutable_msg_body() {
  
  return msg_body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameToWorldPacket::release_msg_body() {
  // @@protoc_insertion_point(field_release:GameToWorldPacket.msg_body)
  
  return msg_body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameToWorldPacket::set_allocated_msg_body(std::string* msg_body) {
  if (msg_body != nullptr) {
    
  } else {
    
  }
  msg_body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_body);
  // @@protoc_insertion_point(field_set_allocated:GameToWorldPacket.msg_body)
}

// -------------------------------------------------------------------

// WorldToGamePacket

// uint64 player_id = 1;
inline void WorldToGamePacket::clear_player_id() {
  player_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WorldToGamePacket::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WorldToGamePacket::player_id() const {
  // @@protoc_insertion_point(field_get:WorldToGamePacket.player_id)
  return _internal_player_id();
}
inline void WorldToGamePacket::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_id_ = value;
}
inline void WorldToGamePacket::set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:WorldToGamePacket.player_id)
}

// int32 msg_id = 2;
inline void WorldToGamePacket::clear_msg_id() {
  msg_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldToGamePacket::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldToGamePacket::msg_id() const {
  // @@protoc_insertion_point(field_get:WorldToGamePacket.msg_id)
  return _internal_msg_id();
}
inline void WorldToGamePacket::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_id_ = value;
}
inline void WorldToGamePacket::set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:WorldToGamePacket.msg_id)
}

// bytes msg_body = 3;
inline void WorldToGamePacket::clear_msg_body() {
  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorldToGamePacket::msg_body() const {
  // @@protoc_insertion_point(field_get:WorldToGamePacket.msg_body)
  return _internal_msg_body();
}
inline void WorldToGamePacket::set_msg_body(const std::string& value) {
  _internal_set_msg_body(value);
  // @@protoc_insertion_point(field_set:WorldToGamePacket.msg_body)
}
inline std::string* WorldToGamePacket::mutable_msg_body() {
  // @@protoc_insertion_point(field_mutable:WorldToGamePacket.msg_body)
  return _internal_mutable_msg_body();
}
inline const std::string& WorldToGamePacket::_internal_msg_body() const {
  return msg_body_.GetNoArena();
}
inline void WorldToGamePacket::_internal_set_msg_body(const std::string& value) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WorldToGamePacket::set_msg_body(std::string&& value) {
  
  msg_body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WorldToGamePacket.msg_body)
}
inline void WorldToGamePacket::set_msg_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WorldToGamePacket.msg_body)
}
inline void WorldToGamePacket::set_msg_body(const void* value, size_t size) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WorldToGamePacket.msg_body)
}
inline std::string* WorldToGamePacket::_internal_mutable_msg_body() {
  
  return msg_body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorldToGamePacket::release_msg_body() {
  // @@protoc_insertion_point(field_release:WorldToGamePacket.msg_body)
  
  return msg_body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorldToGamePacket::set_allocated_msg_body(std::string* msg_body) {
  if (msg_body != nullptr) {
    
  } else {
    
  }
  msg_body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_body);
  // @@protoc_insertion_point(field_set_allocated:WorldToGamePacket.msg_body)
}

// -------------------------------------------------------------------

// LoginToWorldPacket

// uint64 player_id = 1;
inline void LoginToWorldPacket::clear_player_id() {
  player_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoginToWorldPacket::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoginToWorldPacket::player_id() const {
  // @@protoc_insertion_point(field_get:LoginToWorldPacket.player_id)
  return _internal_player_id();
}
inline void LoginToWorldPacket::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_id_ = value;
}
inline void LoginToWorldPacket::set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:LoginToWorldPacket.player_id)
}

// int32 msg_id = 2;
inline void LoginToWorldPacket::clear_msg_id() {
  msg_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginToWorldPacket::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginToWorldPacket::msg_id() const {
  // @@protoc_insertion_point(field_get:LoginToWorldPacket.msg_id)
  return _internal_msg_id();
}
inline void LoginToWorldPacket::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_id_ = value;
}
inline void LoginToWorldPacket::set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:LoginToWorldPacket.msg_id)
}

// bytes msg_body = 3;
inline void LoginToWorldPacket::clear_msg_body() {
  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginToWorldPacket::msg_body() const {
  // @@protoc_insertion_point(field_get:LoginToWorldPacket.msg_body)
  return _internal_msg_body();
}
inline void LoginToWorldPacket::set_msg_body(const std::string& value) {
  _internal_set_msg_body(value);
  // @@protoc_insertion_point(field_set:LoginToWorldPacket.msg_body)
}
inline std::string* LoginToWorldPacket::mutable_msg_body() {
  // @@protoc_insertion_point(field_mutable:LoginToWorldPacket.msg_body)
  return _internal_mutable_msg_body();
}
inline const std::string& LoginToWorldPacket::_internal_msg_body() const {
  return msg_body_.GetNoArena();
}
inline void LoginToWorldPacket::_internal_set_msg_body(const std::string& value) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginToWorldPacket::set_msg_body(std::string&& value) {
  
  msg_body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginToWorldPacket.msg_body)
}
inline void LoginToWorldPacket::set_msg_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginToWorldPacket.msg_body)
}
inline void LoginToWorldPacket::set_msg_body(const void* value, size_t size) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginToWorldPacket.msg_body)
}
inline std::string* LoginToWorldPacket::_internal_mutable_msg_body() {
  
  return msg_body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginToWorldPacket::release_msg_body() {
  // @@protoc_insertion_point(field_release:LoginToWorldPacket.msg_body)
  
  return msg_body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginToWorldPacket::set_allocated_msg_body(std::string* msg_body) {
  if (msg_body != nullptr) {
    
  } else {
    
  }
  msg_body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_body);
  // @@protoc_insertion_point(field_set_allocated:LoginToWorldPacket.msg_body)
}

// -------------------------------------------------------------------

// WorldToLoginPacket

// uint64 player_id = 1;
inline void WorldToLoginPacket::clear_player_id() {
  player_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WorldToLoginPacket::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WorldToLoginPacket::player_id() const {
  // @@protoc_insertion_point(field_get:WorldToLoginPacket.player_id)
  return _internal_player_id();
}
inline void WorldToLoginPacket::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_id_ = value;
}
inline void WorldToLoginPacket::set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:WorldToLoginPacket.player_id)
}

// int32 msg_id = 2;
inline void WorldToLoginPacket::clear_msg_id() {
  msg_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldToLoginPacket::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldToLoginPacket::msg_id() const {
  // @@protoc_insertion_point(field_get:WorldToLoginPacket.msg_id)
  return _internal_msg_id();
}
inline void WorldToLoginPacket::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_id_ = value;
}
inline void WorldToLoginPacket::set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:WorldToLoginPacket.msg_id)
}

// bytes msg_body = 3;
inline void WorldToLoginPacket::clear_msg_body() {
  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorldToLoginPacket::msg_body() const {
  // @@protoc_insertion_point(field_get:WorldToLoginPacket.msg_body)
  return _internal_msg_body();
}
inline void WorldToLoginPacket::set_msg_body(const std::string& value) {
  _internal_set_msg_body(value);
  // @@protoc_insertion_point(field_set:WorldToLoginPacket.msg_body)
}
inline std::string* WorldToLoginPacket::mutable_msg_body() {
  // @@protoc_insertion_point(field_mutable:WorldToLoginPacket.msg_body)
  return _internal_mutable_msg_body();
}
inline const std::string& WorldToLoginPacket::_internal_msg_body() const {
  return msg_body_.GetNoArena();
}
inline void WorldToLoginPacket::_internal_set_msg_body(const std::string& value) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WorldToLoginPacket::set_msg_body(std::string&& value) {
  
  msg_body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WorldToLoginPacket.msg_body)
}
inline void WorldToLoginPacket::set_msg_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WorldToLoginPacket.msg_body)
}
inline void WorldToLoginPacket::set_msg_body(const void* value, size_t size) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WorldToLoginPacket.msg_body)
}
inline std::string* WorldToLoginPacket::_internal_mutable_msg_body() {
  
  return msg_body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorldToLoginPacket::release_msg_body() {
  // @@protoc_insertion_point(field_release:WorldToLoginPacket.msg_body)
  
  return msg_body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorldToLoginPacket::set_allocated_msg_body(std::string* msg_body) {
  if (msg_body != nullptr) {
    
  } else {
    
  }
  msg_body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_body);
  // @@protoc_insertion_point(field_set_allocated:WorldToLoginPacket.msg_body)
}

// -------------------------------------------------------------------

// WorldToDBPacket

// uint64 player_id = 1;
inline void WorldToDBPacket::clear_player_id() {
  player_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WorldToDBPacket::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WorldToDBPacket::player_id() const {
  // @@protoc_insertion_point(field_get:WorldToDBPacket.player_id)
  return _internal_player_id();
}
inline void WorldToDBPacket::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_id_ = value;
}
inline void WorldToDBPacket::set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:WorldToDBPacket.player_id)
}

// int32 msg_id = 2;
inline void WorldToDBPacket::clear_msg_id() {
  msg_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldToDBPacket::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldToDBPacket::msg_id() const {
  // @@protoc_insertion_point(field_get:WorldToDBPacket.msg_id)
  return _internal_msg_id();
}
inline void WorldToDBPacket::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_id_ = value;
}
inline void WorldToDBPacket::set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:WorldToDBPacket.msg_id)
}

// bytes msg_body = 3;
inline void WorldToDBPacket::clear_msg_body() {
  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorldToDBPacket::msg_body() const {
  // @@protoc_insertion_point(field_get:WorldToDBPacket.msg_body)
  return _internal_msg_body();
}
inline void WorldToDBPacket::set_msg_body(const std::string& value) {
  _internal_set_msg_body(value);
  // @@protoc_insertion_point(field_set:WorldToDBPacket.msg_body)
}
inline std::string* WorldToDBPacket::mutable_msg_body() {
  // @@protoc_insertion_point(field_mutable:WorldToDBPacket.msg_body)
  return _internal_mutable_msg_body();
}
inline const std::string& WorldToDBPacket::_internal_msg_body() const {
  return msg_body_.GetNoArena();
}
inline void WorldToDBPacket::_internal_set_msg_body(const std::string& value) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WorldToDBPacket::set_msg_body(std::string&& value) {
  
  msg_body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WorldToDBPacket.msg_body)
}
inline void WorldToDBPacket::set_msg_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WorldToDBPacket.msg_body)
}
inline void WorldToDBPacket::set_msg_body(const void* value, size_t size) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WorldToDBPacket.msg_body)
}
inline std::string* WorldToDBPacket::_internal_mutable_msg_body() {
  
  return msg_body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorldToDBPacket::release_msg_body() {
  // @@protoc_insertion_point(field_release:WorldToDBPacket.msg_body)
  
  return msg_body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorldToDBPacket::set_allocated_msg_body(std::string* msg_body) {
  if (msg_body != nullptr) {
    
  } else {
    
  }
  msg_body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_body);
  // @@protoc_insertion_point(field_set_allocated:WorldToDBPacket.msg_body)
}

// -------------------------------------------------------------------

// DBToWorldPacket

// uint64 player_id = 1;
inline void DBToWorldPacket::clear_player_id() {
  player_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DBToWorldPacket::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DBToWorldPacket::player_id() const {
  // @@protoc_insertion_point(field_get:DBToWorldPacket.player_id)
  return _internal_player_id();
}
inline void DBToWorldPacket::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_id_ = value;
}
inline void DBToWorldPacket::set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:DBToWorldPacket.player_id)
}

// int32 msg_id = 2;
inline void DBToWorldPacket::clear_msg_id() {
  msg_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DBToWorldPacket::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DBToWorldPacket::msg_id() const {
  // @@protoc_insertion_point(field_get:DBToWorldPacket.msg_id)
  return _internal_msg_id();
}
inline void DBToWorldPacket::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_id_ = value;
}
inline void DBToWorldPacket::set_msg_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:DBToWorldPacket.msg_id)
}

// bytes msg_body = 3;
inline void DBToWorldPacket::clear_msg_body() {
  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DBToWorldPacket::msg_body() const {
  // @@protoc_insertion_point(field_get:DBToWorldPacket.msg_body)
  return _internal_msg_body();
}
inline void DBToWorldPacket::set_msg_body(const std::string& value) {
  _internal_set_msg_body(value);
  // @@protoc_insertion_point(field_set:DBToWorldPacket.msg_body)
}
inline std::string* DBToWorldPacket::mutable_msg_body() {
  // @@protoc_insertion_point(field_mutable:DBToWorldPacket.msg_body)
  return _internal_mutable_msg_body();
}
inline const std::string& DBToWorldPacket::_internal_msg_body() const {
  return msg_body_.GetNoArena();
}
inline void DBToWorldPacket::_internal_set_msg_body(const std::string& value) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DBToWorldPacket::set_msg_body(std::string&& value) {
  
  msg_body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DBToWorldPacket.msg_body)
}
inline void DBToWorldPacket::set_msg_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DBToWorldPacket.msg_body)
}
inline void DBToWorldPacket::set_msg_body(const void* value, size_t size) {
  
  msg_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DBToWorldPacket.msg_body)
}
inline std::string* DBToWorldPacket::_internal_mutable_msg_body() {
  
  return msg_body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DBToWorldPacket::release_msg_body() {
  // @@protoc_insertion_point(field_release:DBToWorldPacket.msg_body)
  
  return msg_body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DBToWorldPacket::set_allocated_msg_body(std::string* msg_body) {
  if (msg_body != nullptr) {
    
  } else {
    
  }
  msg_body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_body);
  // @@protoc_insertion_point(field_set_allocated:DBToWorldPacket.msg_body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EServerState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EServerState>() {
  return ::EServerState_descriptor();
}
template <> struct is_proto_enum< ::ServerNodeMsgID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerNodeMsgID>() {
  return ::ServerNodeMsgID_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SeFNodeNet_2eproto
