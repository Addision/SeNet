// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SeFNodeNet.proto

#include "SeFNodeNet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_SeFNodeNet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerReport_SeFNodeNet_2eproto;
class ServerReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerReport> _instance;
} _ServerReport_default_instance_;
class ServerReportListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerReportList> _instance;
} _ServerReportList_default_instance_;
class ServerHeartBeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerHeartBeat> _instance;
} _ServerHeartBeat_default_instance_;
class NodeToMasterPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeToMasterPacket> _instance;
} _NodeToMasterPacket_default_instance_;
class MasterToNodePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MasterToNodePacket> _instance;
} _MasterToNodePacket_default_instance_;
class GateToLoginPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GateToLoginPacket> _instance;
} _GateToLoginPacket_default_instance_;
class LoginToGatePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginToGatePacket> _instance;
} _LoginToGatePacket_default_instance_;
class GateToGamePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GateToGamePacket> _instance;
} _GateToGamePacket_default_instance_;
class GameToGatePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameToGatePacket> _instance;
} _GameToGatePacket_default_instance_;
class GateToChatPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GateToChatPacket> _instance;
} _GateToChatPacket_default_instance_;
class ChatToGatePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatToGatePacket> _instance;
} _ChatToGatePacket_default_instance_;
class WorldToGatePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorldToGatePacket> _instance;
} _WorldToGatePacket_default_instance_;
class GateToWorldPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GateToWorldPacket> _instance;
} _GateToWorldPacket_default_instance_;
class GameToChatPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameToChatPacket> _instance;
} _GameToChatPacket_default_instance_;
class ChatToGamePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatToGamePacket> _instance;
} _ChatToGamePacket_default_instance_;
class GameToWorldPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameToWorldPacket> _instance;
} _GameToWorldPacket_default_instance_;
class WorldToGamePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorldToGamePacket> _instance;
} _WorldToGamePacket_default_instance_;
class LoginToWorldPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginToWorldPacket> _instance;
} _LoginToWorldPacket_default_instance_;
class WorldToLoginPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorldToLoginPacket> _instance;
} _WorldToLoginPacket_default_instance_;
class WorldToDBPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorldToDBPacket> _instance;
} _WorldToDBPacket_default_instance_;
class DBToWorldPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBToWorldPacket> _instance;
} _DBToWorldPacket_default_instance_;
static void InitDefaultsscc_info_ChatToGamePacket_SeFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChatToGamePacket_default_instance_;
    new (ptr) ::ChatToGamePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatToGamePacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatToGamePacket_SeFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChatToGamePacket_SeFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_ChatToGatePacket_SeFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChatToGatePacket_default_instance_;
    new (ptr) ::ChatToGatePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatToGatePacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatToGatePacket_SeFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChatToGatePacket_SeFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_DBToWorldPacket_SeFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBToWorldPacket_default_instance_;
    new (ptr) ::DBToWorldPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBToWorldPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBToWorldPacket_SeFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DBToWorldPacket_SeFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_GameToChatPacket_SeFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameToChatPacket_default_instance_;
    new (ptr) ::GameToChatPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameToChatPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameToChatPacket_SeFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameToChatPacket_SeFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_GameToGatePacket_SeFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameToGatePacket_default_instance_;
    new (ptr) ::GameToGatePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameToGatePacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameToGatePacket_SeFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameToGatePacket_SeFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_GameToWorldPacket_SeFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameToWorldPacket_default_instance_;
    new (ptr) ::GameToWorldPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameToWorldPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameToWorldPacket_SeFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameToWorldPacket_SeFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_GateToChatPacket_SeFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GateToChatPacket_default_instance_;
    new (ptr) ::GateToChatPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GateToChatPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GateToChatPacket_SeFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GateToChatPacket_SeFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_GateToGamePacket_SeFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GateToGamePacket_default_instance_;
    new (ptr) ::GateToGamePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GateToGamePacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GateToGamePacket_SeFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GateToGamePacket_SeFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_GateToLoginPacket_SeFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GateToLoginPacket_default_instance_;
    new (ptr) ::GateToLoginPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GateToLoginPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GateToLoginPacket_SeFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GateToLoginPacket_SeFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_GateToWorldPacket_SeFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GateToWorldPacket_default_instance_;
    new (ptr) ::GateToWorldPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GateToWorldPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GateToWorldPacket_SeFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GateToWorldPacket_SeFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_LoginToGatePacket_SeFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LoginToGatePacket_default_instance_;
    new (ptr) ::LoginToGatePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoginToGatePacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginToGatePacket_SeFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginToGatePacket_SeFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_LoginToWorldPacket_SeFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LoginToWorldPacket_default_instance_;
    new (ptr) ::LoginToWorldPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoginToWorldPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginToWorldPacket_SeFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginToWorldPacket_SeFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_MasterToNodePacket_SeFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MasterToNodePacket_default_instance_;
    new (ptr) ::MasterToNodePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MasterToNodePacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MasterToNodePacket_SeFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MasterToNodePacket_SeFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_NodeToMasterPacket_SeFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NodeToMasterPacket_default_instance_;
    new (ptr) ::NodeToMasterPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NodeToMasterPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NodeToMasterPacket_SeFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NodeToMasterPacket_SeFNodeNet_2eproto}, {
      &scc_info_ServerReport_SeFNodeNet_2eproto.base,}};

static void InitDefaultsscc_info_ServerHeartBeat_SeFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ServerHeartBeat_default_instance_;
    new (ptr) ::ServerHeartBeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerHeartBeat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerHeartBeat_SeFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerHeartBeat_SeFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_ServerReport_SeFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ServerReport_default_instance_;
    new (ptr) ::ServerReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerReport_SeFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerReport_SeFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_ServerReportList_SeFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ServerReportList_default_instance_;
    new (ptr) ::ServerReportList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerReportList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerReportList_SeFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServerReportList_SeFNodeNet_2eproto}, {
      &scc_info_ServerReport_SeFNodeNet_2eproto.base,}};

static void InitDefaultsscc_info_WorldToDBPacket_SeFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WorldToDBPacket_default_instance_;
    new (ptr) ::WorldToDBPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WorldToDBPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorldToDBPacket_SeFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorldToDBPacket_SeFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_WorldToGamePacket_SeFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WorldToGamePacket_default_instance_;
    new (ptr) ::WorldToGamePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WorldToGamePacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorldToGamePacket_SeFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorldToGamePacket_SeFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_WorldToGatePacket_SeFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WorldToGatePacket_default_instance_;
    new (ptr) ::WorldToGatePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WorldToGatePacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorldToGatePacket_SeFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorldToGatePacket_SeFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_WorldToLoginPacket_SeFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WorldToLoginPacket_default_instance_;
    new (ptr) ::WorldToLoginPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WorldToLoginPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorldToLoginPacket_SeFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorldToLoginPacket_SeFNodeNet_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SeFNodeNet_2eproto[21];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_SeFNodeNet_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SeFNodeNet_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SeFNodeNet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerReport, server_id_),
  PROTOBUF_FIELD_OFFSET(::ServerReport, server_name_),
  PROTOBUF_FIELD_OFFSET(::ServerReport, server_ip_),
  PROTOBUF_FIELD_OFFSET(::ServerReport, server_port_),
  PROTOBUF_FIELD_OFFSET(::ServerReport, server_max_online_),
  PROTOBUF_FIELD_OFFSET(::ServerReport, server_cur_count_),
  PROTOBUF_FIELD_OFFSET(::ServerReport, server_state_),
  PROTOBUF_FIELD_OFFSET(::ServerReport, server_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerReportList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerReportList, server_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerHeartBeat, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NodeToMasterPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NodeToMasterPacket, server_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MasterToNodePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MasterToNodePacket, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GateToLoginPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GateToLoginPacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::GateToLoginPacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::GateToLoginPacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoginToGatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LoginToGatePacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::LoginToGatePacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::LoginToGatePacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GateToGamePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GateToGamePacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::GateToGamePacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::GateToGamePacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameToGatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameToGatePacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::GameToGatePacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::GameToGatePacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GateToChatPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GateToChatPacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::GateToChatPacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::GateToChatPacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatToGatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatToGatePacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::ChatToGatePacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::ChatToGatePacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WorldToGatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WorldToGatePacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::WorldToGatePacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::WorldToGatePacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GateToWorldPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GateToWorldPacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::GateToWorldPacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::GateToWorldPacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameToChatPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameToChatPacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::GameToChatPacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::GameToChatPacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatToGamePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatToGamePacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::ChatToGamePacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::ChatToGamePacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameToWorldPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameToWorldPacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::GameToWorldPacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::GameToWorldPacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WorldToGamePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WorldToGamePacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::WorldToGamePacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::WorldToGamePacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoginToWorldPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LoginToWorldPacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::LoginToWorldPacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::LoginToWorldPacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WorldToLoginPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WorldToLoginPacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::WorldToLoginPacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::WorldToLoginPacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WorldToDBPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WorldToDBPacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::WorldToDBPacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::WorldToDBPacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBToWorldPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBToWorldPacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::DBToWorldPacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::DBToWorldPacket, msg_body_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ServerReport)},
  { 13, -1, sizeof(::ServerReportList)},
  { 19, -1, sizeof(::ServerHeartBeat)},
  { 25, -1, sizeof(::NodeToMasterPacket)},
  { 31, -1, sizeof(::MasterToNodePacket)},
  { 37, -1, sizeof(::GateToLoginPacket)},
  { 45, -1, sizeof(::LoginToGatePacket)},
  { 53, -1, sizeof(::GateToGamePacket)},
  { 61, -1, sizeof(::GameToGatePacket)},
  { 69, -1, sizeof(::GateToChatPacket)},
  { 77, -1, sizeof(::ChatToGatePacket)},
  { 85, -1, sizeof(::WorldToGatePacket)},
  { 93, -1, sizeof(::GateToWorldPacket)},
  { 101, -1, sizeof(::GameToChatPacket)},
  { 109, -1, sizeof(::ChatToGamePacket)},
  { 117, -1, sizeof(::GameToWorldPacket)},
  { 125, -1, sizeof(::WorldToGamePacket)},
  { 133, -1, sizeof(::LoginToWorldPacket)},
  { 141, -1, sizeof(::WorldToLoginPacket)},
  { 149, -1, sizeof(::WorldToDBPacket)},
  { 157, -1, sizeof(::DBToWorldPacket)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServerReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServerReportList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServerHeartBeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NodeToMasterPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MasterToNodePacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GateToLoginPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LoginToGatePacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GateToGamePacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameToGatePacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GateToChatPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ChatToGatePacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WorldToGatePacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GateToWorldPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameToChatPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ChatToGamePacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameToWorldPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WorldToGamePacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LoginToWorldPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WorldToLoginPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WorldToDBPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBToWorldPacket_default_instance_),
};

const char descriptor_table_protodef_SeFNodeNet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020SeFNodeNet.proto\"\315\001\n\014ServerReport\022\021\n\ts"
  "erver_id\030\001 \001(\005\022\023\n\013server_name\030\002 \001(\014\022\021\n\ts"
  "erver_ip\030\003 \001(\014\022\023\n\013server_port\030\004 \001(\005\022\031\n\021s"
  "erver_max_online\030\005 \001(\005\022\030\n\020server_cur_cou"
  "nt\030\006 \001(\005\022#\n\014server_state\030\007 \001(\0162\r.EServer"
  "State\022\023\n\013server_type\030\010 \001(\005\"6\n\020ServerRepo"
  "rtList\022\"\n\013server_info\030\001 \003(\0132\r.ServerRepo"
  "rt\" \n\017ServerHeartBeat\022\r\n\005count\030\001 \001(\005\"8\n\022"
  "NodeToMasterPacket\022\"\n\013server_info\030\001 \001(\0132"
  "\r.ServerReport\"$\n\022MasterToNodePacket\022\016\n\006"
  "result\030\001 \001(\005\"H\n\021GateToLoginPacket\022\021\n\tpla"
  "yer_id\030\001 \001(\004\022\016\n\006msg_id\030\002 \001(\005\022\020\n\010msg_body"
  "\030\003 \001(\014\"H\n\021LoginToGatePacket\022\021\n\tplayer_id"
  "\030\001 \001(\004\022\016\n\006msg_id\030\002 \001(\005\022\020\n\010msg_body\030\003 \001(\014"
  "\"G\n\020GateToGamePacket\022\021\n\tplayer_id\030\001 \001(\004\022"
  "\016\n\006msg_id\030\002 \001(\005\022\020\n\010msg_body\030\003 \001(\014\"G\n\020Gam"
  "eToGatePacket\022\021\n\tplayer_id\030\001 \001(\004\022\016\n\006msg_"
  "id\030\002 \001(\005\022\020\n\010msg_body\030\003 \001(\014\"G\n\020GateToChat"
  "Packet\022\021\n\tplayer_id\030\001 \001(\004\022\016\n\006msg_id\030\002 \001("
  "\005\022\020\n\010msg_body\030\003 \001(\014\"G\n\020ChatToGatePacket\022"
  "\021\n\tplayer_id\030\001 \001(\004\022\016\n\006msg_id\030\002 \001(\005\022\020\n\010ms"
  "g_body\030\003 \001(\014\"H\n\021WorldToGatePacket\022\021\n\tpla"
  "yer_id\030\001 \001(\004\022\016\n\006msg_id\030\002 \001(\005\022\020\n\010msg_body"
  "\030\003 \001(\014\"H\n\021GateToWorldPacket\022\021\n\tplayer_id"
  "\030\001 \001(\004\022\016\n\006msg_id\030\002 \001(\005\022\020\n\010msg_body\030\003 \001(\014"
  "\"G\n\020GameToChatPacket\022\021\n\tplayer_id\030\001 \001(\004\022"
  "\016\n\006msg_id\030\002 \001(\005\022\020\n\010msg_body\030\003 \001(\014\"G\n\020Cha"
  "tToGamePacket\022\021\n\tplayer_id\030\001 \001(\004\022\016\n\006msg_"
  "id\030\002 \001(\005\022\020\n\010msg_body\030\003 \001(\014\"H\n\021GameToWorl"
  "dPacket\022\021\n\tplayer_id\030\001 \001(\004\022\016\n\006msg_id\030\002 \001"
  "(\005\022\020\n\010msg_body\030\003 \001(\014\"H\n\021WorldToGamePacke"
  "t\022\021\n\tplayer_id\030\001 \001(\004\022\016\n\006msg_id\030\002 \001(\005\022\020\n\010"
  "msg_body\030\003 \001(\014\"I\n\022LoginToWorldPacket\022\021\n\t"
  "player_id\030\001 \001(\004\022\016\n\006msg_id\030\002 \001(\005\022\020\n\010msg_b"
  "ody\030\003 \001(\014\"I\n\022WorldToLoginPacket\022\021\n\tplaye"
  "r_id\030\001 \001(\004\022\016\n\006msg_id\030\002 \001(\005\022\020\n\010msg_body\030\003"
  " \001(\014\"F\n\017WorldToDBPacket\022\021\n\tplayer_id\030\001 \001"
  "(\004\022\016\n\006msg_id\030\002 \001(\005\022\020\n\010msg_body\030\003 \001(\014\"F\n\017"
  "DBToWorldPacket\022\021\n\tplayer_id\030\001 \001(\004\022\016\n\006ms"
  "g_id\030\002 \001(\005\022\020\n\010msg_body\030\003 \001(\014*Z\n\014EServerS"
  "tate\022\r\n\tEST_CRASH\020\000\022\016\n\nEST_NORMAL\020\001\022\014\n\010E"
  "ST_BUSY\020\002\022\014\n\010EST_FIRE\020\003\022\017\n\013EST_MAINTEN\020\004"
  "*\336\004\n\017ServerNodeMsgID\022\026\n\022SERVER_NODE_MSG_"
  "ID\020\000\022\030\n\023GATE_ROUTE_TO_LOGIN\020\221N\022\030\n\023LOGIN_"
  "ROUTE_TO_GATE\020\222N\022\027\n\022GATE_ROUTE_TO_GAME\020\223"
  "N\022\027\n\022GAME_ROUTE_TO_GATE\020\224N\022\027\n\022GATE_ROUTE"
  "_TO_CHAT\020\225N\022\027\n\022CHAT_ROUTE_TO_GATE\020\226N\022\030\n\023"
  "WORLD_ROUTE_TO_GATE\020\227N\022\030\n\023GATE_ROUTE_TO_"
  "WORLD\020\230N\022\027\n\022GAME_ROUTE_TO_CHAT\020\231N\022\027\n\022CHA"
  "T_ROUTE_TO_GAME\020\232N\022\030\n\023GAME_ROUTE_TO_WORL"
  "D\020\233N\022\030\n\023WORLD_ROUTE_TO_GAME\020\234N\022\031\n\024LOGIN_"
  "ROUTE_TO_WORLD\020\235N\022\031\n\024WORLD_ROUTE_TO_LOGI"
  "N\020\236N\022\026\n\021WORLD_ROUTE_TO_DB\020\237N\022\026\n\021DB_ROUTE"
  "_TO_WORLD\020\240N\022\031\n\024PLAYER_ROUTE_TO_GATE\020\241N\022"
  "\031\n\024GATE_ROUTE_TO_PLAYER\020\242N\022\030\n\023GAME_PLAYE"
  "R_OFFLINE\020\303N\022!\n\034REPORT_CLIENT_INFO_TO_SE"
  "RVER\020\306N\022(\n#MASTER_REPORT_SERVER_INFO_TO_"
  "SERVER\020\305Nb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_SeFNodeNet_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_SeFNodeNet_2eproto_sccs[21] = {
  &scc_info_ChatToGamePacket_SeFNodeNet_2eproto.base,
  &scc_info_ChatToGatePacket_SeFNodeNet_2eproto.base,
  &scc_info_DBToWorldPacket_SeFNodeNet_2eproto.base,
  &scc_info_GameToChatPacket_SeFNodeNet_2eproto.base,
  &scc_info_GameToGatePacket_SeFNodeNet_2eproto.base,
  &scc_info_GameToWorldPacket_SeFNodeNet_2eproto.base,
  &scc_info_GateToChatPacket_SeFNodeNet_2eproto.base,
  &scc_info_GateToGamePacket_SeFNodeNet_2eproto.base,
  &scc_info_GateToLoginPacket_SeFNodeNet_2eproto.base,
  &scc_info_GateToWorldPacket_SeFNodeNet_2eproto.base,
  &scc_info_LoginToGatePacket_SeFNodeNet_2eproto.base,
  &scc_info_LoginToWorldPacket_SeFNodeNet_2eproto.base,
  &scc_info_MasterToNodePacket_SeFNodeNet_2eproto.base,
  &scc_info_NodeToMasterPacket_SeFNodeNet_2eproto.base,
  &scc_info_ServerHeartBeat_SeFNodeNet_2eproto.base,
  &scc_info_ServerReport_SeFNodeNet_2eproto.base,
  &scc_info_ServerReportList_SeFNodeNet_2eproto.base,
  &scc_info_WorldToDBPacket_SeFNodeNet_2eproto.base,
  &scc_info_WorldToGamePacket_SeFNodeNet_2eproto.base,
  &scc_info_WorldToGatePacket_SeFNodeNet_2eproto.base,
  &scc_info_WorldToLoginPacket_SeFNodeNet_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SeFNodeNet_2eproto_once;
static bool descriptor_table_SeFNodeNet_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SeFNodeNet_2eproto = {
  &descriptor_table_SeFNodeNet_2eproto_initialized, descriptor_table_protodef_SeFNodeNet_2eproto, "SeFNodeNet.proto", 2297,
  &descriptor_table_SeFNodeNet_2eproto_once, descriptor_table_SeFNodeNet_2eproto_sccs, descriptor_table_SeFNodeNet_2eproto_deps, 21, 0,
  schemas, file_default_instances, TableStruct_SeFNodeNet_2eproto::offsets,
  file_level_metadata_SeFNodeNet_2eproto, 21, file_level_enum_descriptors_SeFNodeNet_2eproto, file_level_service_descriptors_SeFNodeNet_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SeFNodeNet_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_SeFNodeNet_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EServerState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SeFNodeNet_2eproto);
  return file_level_enum_descriptors_SeFNodeNet_2eproto[0];
}
bool EServerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerNodeMsgID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SeFNodeNet_2eproto);
  return file_level_enum_descriptors_SeFNodeNet_2eproto[1];
}
bool ServerNodeMsgID_IsValid(int value) {
  switch (value) {
    case 0:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10005:
    case 10006:
    case 10007:
    case 10008:
    case 10009:
    case 10010:
    case 10011:
    case 10012:
    case 10013:
    case 10014:
    case 10015:
    case 10016:
    case 10017:
    case 10018:
    case 10051:
    case 10053:
    case 10054:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ServerReport::InitAsDefaultInstance() {
}
class ServerReport::_Internal {
 public:
};

ServerReport::ServerReport()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerReport)
}
ServerReport::ServerReport(const ServerReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_name().empty()) {
    server_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  server_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_ip().empty()) {
    server_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_ip_);
  }
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_type_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(server_type_));
  // @@protoc_insertion_point(copy_constructor:ServerReport)
}

void ServerReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerReport_SeFNodeNet_2eproto.base);
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_type_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(server_type_));
}

ServerReport::~ServerReport() {
  // @@protoc_insertion_point(destructor:ServerReport)
  SharedDtor();
}

void ServerReport::SharedDtor() {
  server_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerReport& ServerReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerReport_SeFNodeNet_2eproto.base);
  return *internal_default_instance();
}


void ServerReport::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_type_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(server_type_));
  _internal_metadata_.Clear();
}

const char* ServerReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes server_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_server_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes server_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_server_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_max_online = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          server_max_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_cur_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          server_cur_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EServerState server_state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_server_state(static_cast<::EServerState>(val));
        } else goto handle_unusual;
        continue;
      // int32 server_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          server_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_server_id(), target);
  }

  // bytes server_name = 2;
  if (this->server_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_server_name(), target);
  }

  // bytes server_ip = 3;
  if (this->server_ip().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_server_ip(), target);
  }

  // int32 server_port = 4;
  if (this->server_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_server_port(), target);
  }

  // int32 server_max_online = 5;
  if (this->server_max_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_server_max_online(), target);
  }

  // int32 server_cur_count = 6;
  if (this->server_cur_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_server_cur_count(), target);
  }

  // .EServerState server_state = 7;
  if (this->server_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_server_state(), target);
  }

  // int32 server_type = 8;
  if (this->server_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_server_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerReport)
  return target;
}

size_t ServerReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes server_name = 2;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_server_name());
  }

  // bytes server_ip = 3;
  if (this->server_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_server_ip());
  }

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  // int32 server_port = 4;
  if (this->server_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_port());
  }

  // int32 server_max_online = 5;
  if (this->server_max_online() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_max_online());
  }

  // int32 server_cur_count = 6;
  if (this->server_cur_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_cur_count());
  }

  // .EServerState server_state = 7;
  if (this->server_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_server_state());
  }

  // int32 server_type = 8;
  if (this->server_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerReport)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerReport)
    MergeFrom(*source);
  }
}

void ServerReport::MergeFrom(const ServerReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_name().size() > 0) {

    server_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.server_ip().size() > 0) {

    server_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_ip_);
  }
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.server_port() != 0) {
    _internal_set_server_port(from._internal_server_port());
  }
  if (from.server_max_online() != 0) {
    _internal_set_server_max_online(from._internal_server_max_online());
  }
  if (from.server_cur_count() != 0) {
    _internal_set_server_cur_count(from._internal_server_cur_count());
  }
  if (from.server_state() != 0) {
    _internal_set_server_state(from._internal_server_state());
  }
  if (from.server_type() != 0) {
    _internal_set_server_type(from._internal_server_type());
  }
}

void ServerReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerReport::CopyFrom(const ServerReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerReport::IsInitialized() const {
  return true;
}

void ServerReport::InternalSwap(ServerReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  server_name_.Swap(&other->server_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  server_ip_.Swap(&other->server_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_id_, other->server_id_);
  swap(server_port_, other->server_port_);
  swap(server_max_online_, other->server_max_online_);
  swap(server_cur_count_, other->server_cur_count_);
  swap(server_state_, other->server_state_);
  swap(server_type_, other->server_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerReportList::InitAsDefaultInstance() {
}
class ServerReportList::_Internal {
 public:
};

ServerReportList::ServerReportList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerReportList)
}
ServerReportList::ServerReportList(const ServerReportList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      server_info_(from.server_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerReportList)
}

void ServerReportList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerReportList_SeFNodeNet_2eproto.base);
}

ServerReportList::~ServerReportList() {
  // @@protoc_insertion_point(destructor:ServerReportList)
  SharedDtor();
}

void ServerReportList::SharedDtor() {
}

void ServerReportList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerReportList& ServerReportList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerReportList_SeFNodeNet_2eproto.base);
  return *internal_default_instance();
}


void ServerReportList::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerReportList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_info_.Clear();
  _internal_metadata_.Clear();
}

const char* ServerReportList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ServerReport server_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_server_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerReportList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerReportList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ServerReport server_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_server_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_server_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerReportList)
  return target;
}

size_t ServerReportList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerReportList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ServerReport server_info = 1;
  total_size += 1UL * this->_internal_server_info_size();
  for (const auto& msg : this->server_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerReportList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerReportList)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerReportList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerReportList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerReportList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerReportList)
    MergeFrom(*source);
  }
}

void ServerReportList::MergeFrom(const ServerReportList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerReportList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  server_info_.MergeFrom(from.server_info_);
}

void ServerReportList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerReportList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerReportList::CopyFrom(const ServerReportList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerReportList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerReportList::IsInitialized() const {
  return true;
}

void ServerReportList::InternalSwap(ServerReportList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  server_info_.InternalSwap(&other->server_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerReportList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerHeartBeat::InitAsDefaultInstance() {
}
class ServerHeartBeat::_Internal {
 public:
};

ServerHeartBeat::ServerHeartBeat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerHeartBeat)
}
ServerHeartBeat::ServerHeartBeat(const ServerHeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:ServerHeartBeat)
}

void ServerHeartBeat::SharedCtor() {
  count_ = 0;
}

ServerHeartBeat::~ServerHeartBeat() {
  // @@protoc_insertion_point(destructor:ServerHeartBeat)
  SharedDtor();
}

void ServerHeartBeat::SharedDtor() {
}

void ServerHeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerHeartBeat& ServerHeartBeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerHeartBeat_SeFNodeNet_2eproto.base);
  return *internal_default_instance();
}


void ServerHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = 0;
  _internal_metadata_.Clear();
}

const char* ServerHeartBeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerHeartBeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerHeartBeat)
  return target;
}

size_t ServerHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerHeartBeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerHeartBeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerHeartBeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerHeartBeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerHeartBeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerHeartBeat)
    MergeFrom(*source);
  }
}

void ServerHeartBeat::MergeFrom(const ServerHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void ServerHeartBeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerHeartBeat::CopyFrom(const ServerHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerHeartBeat::IsInitialized() const {
  return true;
}

void ServerHeartBeat::InternalSwap(ServerHeartBeat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerHeartBeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeToMasterPacket::InitAsDefaultInstance() {
  ::_NodeToMasterPacket_default_instance_._instance.get_mutable()->server_info_ = const_cast< ::ServerReport*>(
      ::ServerReport::internal_default_instance());
}
class NodeToMasterPacket::_Internal {
 public:
  static const ::ServerReport& server_info(const NodeToMasterPacket* msg);
};

const ::ServerReport&
NodeToMasterPacket::_Internal::server_info(const NodeToMasterPacket* msg) {
  return *msg->server_info_;
}
NodeToMasterPacket::NodeToMasterPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodeToMasterPacket)
}
NodeToMasterPacket::NodeToMasterPacket(const NodeToMasterPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_server_info()) {
    server_info_ = new ::ServerReport(*from.server_info_);
  } else {
    server_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NodeToMasterPacket)
}

void NodeToMasterPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeToMasterPacket_SeFNodeNet_2eproto.base);
  server_info_ = nullptr;
}

NodeToMasterPacket::~NodeToMasterPacket() {
  // @@protoc_insertion_point(destructor:NodeToMasterPacket)
  SharedDtor();
}

void NodeToMasterPacket::SharedDtor() {
  if (this != internal_default_instance()) delete server_info_;
}

void NodeToMasterPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeToMasterPacket& NodeToMasterPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeToMasterPacket_SeFNodeNet_2eproto.base);
  return *internal_default_instance();
}


void NodeToMasterPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:NodeToMasterPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && server_info_ != nullptr) {
    delete server_info_;
  }
  server_info_ = nullptr;
  _internal_metadata_.Clear();
}

const char* NodeToMasterPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ServerReport server_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeToMasterPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeToMasterPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ServerReport server_info = 1;
  if (this->has_server_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::server_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeToMasterPacket)
  return target;
}

size_t NodeToMasterPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NodeToMasterPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ServerReport server_info = 1;
  if (this->has_server_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeToMasterPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NodeToMasterPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeToMasterPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeToMasterPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NodeToMasterPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NodeToMasterPacket)
    MergeFrom(*source);
  }
}

void NodeToMasterPacket::MergeFrom(const NodeToMasterPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NodeToMasterPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_info()) {
    _internal_mutable_server_info()->::ServerReport::MergeFrom(from._internal_server_info());
  }
}

void NodeToMasterPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NodeToMasterPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeToMasterPacket::CopyFrom(const NodeToMasterPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NodeToMasterPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeToMasterPacket::IsInitialized() const {
  return true;
}

void NodeToMasterPacket::InternalSwap(NodeToMasterPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(server_info_, other->server_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeToMasterPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MasterToNodePacket::InitAsDefaultInstance() {
}
class MasterToNodePacket::_Internal {
 public:
};

MasterToNodePacket::MasterToNodePacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MasterToNodePacket)
}
MasterToNodePacket::MasterToNodePacket(const MasterToNodePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:MasterToNodePacket)
}

void MasterToNodePacket::SharedCtor() {
  result_ = 0;
}

MasterToNodePacket::~MasterToNodePacket() {
  // @@protoc_insertion_point(destructor:MasterToNodePacket)
  SharedDtor();
}

void MasterToNodePacket::SharedDtor() {
}

void MasterToNodePacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MasterToNodePacket& MasterToNodePacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MasterToNodePacket_SeFNodeNet_2eproto.base);
  return *internal_default_instance();
}


void MasterToNodePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:MasterToNodePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear();
}

const char* MasterToNodePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MasterToNodePacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MasterToNodePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MasterToNodePacket)
  return target;
}

size_t MasterToNodePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MasterToNodePacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MasterToNodePacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MasterToNodePacket)
  GOOGLE_DCHECK_NE(&from, this);
  const MasterToNodePacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MasterToNodePacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MasterToNodePacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MasterToNodePacket)
    MergeFrom(*source);
  }
}

void MasterToNodePacket::MergeFrom(const MasterToNodePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MasterToNodePacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void MasterToNodePacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MasterToNodePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterToNodePacket::CopyFrom(const MasterToNodePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MasterToNodePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterToNodePacket::IsInitialized() const {
  return true;
}

void MasterToNodePacket::InternalSwap(MasterToNodePacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MasterToNodePacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GateToLoginPacket::InitAsDefaultInstance() {
}
class GateToLoginPacket::_Internal {
 public:
};

GateToLoginPacket::GateToLoginPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GateToLoginPacket)
}
GateToLoginPacket::GateToLoginPacket(const GateToLoginPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_body().empty()) {
    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:GateToLoginPacket)
}

void GateToLoginPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GateToLoginPacket_SeFNodeNet_2eproto.base);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

GateToLoginPacket::~GateToLoginPacket() {
  // @@protoc_insertion_point(destructor:GateToLoginPacket)
  SharedDtor();
}

void GateToLoginPacket::SharedDtor() {
  msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GateToLoginPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GateToLoginPacket& GateToLoginPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GateToLoginPacket_SeFNodeNet_2eproto.base);
  return *internal_default_instance();
}


void GateToLoginPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:GateToLoginPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  _internal_metadata_.Clear();
}

const char* GateToLoginPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GateToLoginPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GateToLoginPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_id(), target);
  }

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GateToLoginPacket)
  return target;
}

size_t GateToLoginPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GateToLoginPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_body());
  }

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GateToLoginPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GateToLoginPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const GateToLoginPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GateToLoginPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GateToLoginPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GateToLoginPacket)
    MergeFrom(*source);
  }
}

void GateToLoginPacket::MergeFrom(const GateToLoginPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GateToLoginPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_body().size() > 0) {

    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
}

void GateToLoginPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GateToLoginPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateToLoginPacket::CopyFrom(const GateToLoginPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GateToLoginPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateToLoginPacket::IsInitialized() const {
  return true;
}

void GateToLoginPacket::InternalSwap(GateToLoginPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GateToLoginPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginToGatePacket::InitAsDefaultInstance() {
}
class LoginToGatePacket::_Internal {
 public:
};

LoginToGatePacket::LoginToGatePacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginToGatePacket)
}
LoginToGatePacket::LoginToGatePacket(const LoginToGatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_body().empty()) {
    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:LoginToGatePacket)
}

void LoginToGatePacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginToGatePacket_SeFNodeNet_2eproto.base);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

LoginToGatePacket::~LoginToGatePacket() {
  // @@protoc_insertion_point(destructor:LoginToGatePacket)
  SharedDtor();
}

void LoginToGatePacket::SharedDtor() {
  msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginToGatePacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginToGatePacket& LoginToGatePacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginToGatePacket_SeFNodeNet_2eproto.base);
  return *internal_default_instance();
}


void LoginToGatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginToGatePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  _internal_metadata_.Clear();
}

const char* LoginToGatePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginToGatePacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginToGatePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_id(), target);
  }

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginToGatePacket)
  return target;
}

size_t LoginToGatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginToGatePacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_body());
  }

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginToGatePacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginToGatePacket)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginToGatePacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginToGatePacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginToGatePacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginToGatePacket)
    MergeFrom(*source);
  }
}

void LoginToGatePacket::MergeFrom(const LoginToGatePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginToGatePacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_body().size() > 0) {

    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
}

void LoginToGatePacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginToGatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginToGatePacket::CopyFrom(const LoginToGatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginToGatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginToGatePacket::IsInitialized() const {
  return true;
}

void LoginToGatePacket::InternalSwap(LoginToGatePacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginToGatePacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GateToGamePacket::InitAsDefaultInstance() {
}
class GateToGamePacket::_Internal {
 public:
};

GateToGamePacket::GateToGamePacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GateToGamePacket)
}
GateToGamePacket::GateToGamePacket(const GateToGamePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_body().empty()) {
    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:GateToGamePacket)
}

void GateToGamePacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GateToGamePacket_SeFNodeNet_2eproto.base);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

GateToGamePacket::~GateToGamePacket() {
  // @@protoc_insertion_point(destructor:GateToGamePacket)
  SharedDtor();
}

void GateToGamePacket::SharedDtor() {
  msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GateToGamePacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GateToGamePacket& GateToGamePacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GateToGamePacket_SeFNodeNet_2eproto.base);
  return *internal_default_instance();
}


void GateToGamePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:GateToGamePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  _internal_metadata_.Clear();
}

const char* GateToGamePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GateToGamePacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GateToGamePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_id(), target);
  }

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GateToGamePacket)
  return target;
}

size_t GateToGamePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GateToGamePacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_body());
  }

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GateToGamePacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GateToGamePacket)
  GOOGLE_DCHECK_NE(&from, this);
  const GateToGamePacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GateToGamePacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GateToGamePacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GateToGamePacket)
    MergeFrom(*source);
  }
}

void GateToGamePacket::MergeFrom(const GateToGamePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GateToGamePacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_body().size() > 0) {

    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
}

void GateToGamePacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GateToGamePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateToGamePacket::CopyFrom(const GateToGamePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GateToGamePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateToGamePacket::IsInitialized() const {
  return true;
}

void GateToGamePacket::InternalSwap(GateToGamePacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GateToGamePacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameToGatePacket::InitAsDefaultInstance() {
}
class GameToGatePacket::_Internal {
 public:
};

GameToGatePacket::GameToGatePacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameToGatePacket)
}
GameToGatePacket::GameToGatePacket(const GameToGatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_body().empty()) {
    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:GameToGatePacket)
}

void GameToGatePacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameToGatePacket_SeFNodeNet_2eproto.base);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

GameToGatePacket::~GameToGatePacket() {
  // @@protoc_insertion_point(destructor:GameToGatePacket)
  SharedDtor();
}

void GameToGatePacket::SharedDtor() {
  msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameToGatePacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameToGatePacket& GameToGatePacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameToGatePacket_SeFNodeNet_2eproto.base);
  return *internal_default_instance();
}


void GameToGatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:GameToGatePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  _internal_metadata_.Clear();
}

const char* GameToGatePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameToGatePacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameToGatePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_id(), target);
  }

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameToGatePacket)
  return target;
}

size_t GameToGatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameToGatePacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_body());
  }

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameToGatePacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameToGatePacket)
  GOOGLE_DCHECK_NE(&from, this);
  const GameToGatePacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameToGatePacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameToGatePacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameToGatePacket)
    MergeFrom(*source);
  }
}

void GameToGatePacket::MergeFrom(const GameToGatePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameToGatePacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_body().size() > 0) {

    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
}

void GameToGatePacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameToGatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameToGatePacket::CopyFrom(const GameToGatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameToGatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameToGatePacket::IsInitialized() const {
  return true;
}

void GameToGatePacket::InternalSwap(GameToGatePacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameToGatePacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GateToChatPacket::InitAsDefaultInstance() {
}
class GateToChatPacket::_Internal {
 public:
};

GateToChatPacket::GateToChatPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GateToChatPacket)
}
GateToChatPacket::GateToChatPacket(const GateToChatPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_body().empty()) {
    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:GateToChatPacket)
}

void GateToChatPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GateToChatPacket_SeFNodeNet_2eproto.base);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

GateToChatPacket::~GateToChatPacket() {
  // @@protoc_insertion_point(destructor:GateToChatPacket)
  SharedDtor();
}

void GateToChatPacket::SharedDtor() {
  msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GateToChatPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GateToChatPacket& GateToChatPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GateToChatPacket_SeFNodeNet_2eproto.base);
  return *internal_default_instance();
}


void GateToChatPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:GateToChatPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  _internal_metadata_.Clear();
}

const char* GateToChatPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GateToChatPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GateToChatPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_id(), target);
  }

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GateToChatPacket)
  return target;
}

size_t GateToChatPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GateToChatPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_body());
  }

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GateToChatPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GateToChatPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const GateToChatPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GateToChatPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GateToChatPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GateToChatPacket)
    MergeFrom(*source);
  }
}

void GateToChatPacket::MergeFrom(const GateToChatPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GateToChatPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_body().size() > 0) {

    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
}

void GateToChatPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GateToChatPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateToChatPacket::CopyFrom(const GateToChatPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GateToChatPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateToChatPacket::IsInitialized() const {
  return true;
}

void GateToChatPacket::InternalSwap(GateToChatPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GateToChatPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChatToGatePacket::InitAsDefaultInstance() {
}
class ChatToGatePacket::_Internal {
 public:
};

ChatToGatePacket::ChatToGatePacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatToGatePacket)
}
ChatToGatePacket::ChatToGatePacket(const ChatToGatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_body().empty()) {
    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:ChatToGatePacket)
}

void ChatToGatePacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatToGatePacket_SeFNodeNet_2eproto.base);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

ChatToGatePacket::~ChatToGatePacket() {
  // @@protoc_insertion_point(destructor:ChatToGatePacket)
  SharedDtor();
}

void ChatToGatePacket::SharedDtor() {
  msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatToGatePacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatToGatePacket& ChatToGatePacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatToGatePacket_SeFNodeNet_2eproto.base);
  return *internal_default_instance();
}


void ChatToGatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatToGatePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  _internal_metadata_.Clear();
}

const char* ChatToGatePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatToGatePacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatToGatePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_id(), target);
  }

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatToGatePacket)
  return target;
}

size_t ChatToGatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatToGatePacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_body());
  }

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatToGatePacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatToGatePacket)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatToGatePacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatToGatePacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatToGatePacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatToGatePacket)
    MergeFrom(*source);
  }
}

void ChatToGatePacket::MergeFrom(const ChatToGatePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatToGatePacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_body().size() > 0) {

    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
}

void ChatToGatePacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatToGatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatToGatePacket::CopyFrom(const ChatToGatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatToGatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatToGatePacket::IsInitialized() const {
  return true;
}

void ChatToGatePacket::InternalSwap(ChatToGatePacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatToGatePacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorldToGatePacket::InitAsDefaultInstance() {
}
class WorldToGatePacket::_Internal {
 public:
};

WorldToGatePacket::WorldToGatePacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WorldToGatePacket)
}
WorldToGatePacket::WorldToGatePacket(const WorldToGatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_body().empty()) {
    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:WorldToGatePacket)
}

void WorldToGatePacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorldToGatePacket_SeFNodeNet_2eproto.base);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

WorldToGatePacket::~WorldToGatePacket() {
  // @@protoc_insertion_point(destructor:WorldToGatePacket)
  SharedDtor();
}

void WorldToGatePacket::SharedDtor() {
  msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorldToGatePacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorldToGatePacket& WorldToGatePacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorldToGatePacket_SeFNodeNet_2eproto.base);
  return *internal_default_instance();
}


void WorldToGatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:WorldToGatePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  _internal_metadata_.Clear();
}

const char* WorldToGatePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorldToGatePacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorldToGatePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_id(), target);
  }

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorldToGatePacket)
  return target;
}

size_t WorldToGatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WorldToGatePacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_body());
  }

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorldToGatePacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WorldToGatePacket)
  GOOGLE_DCHECK_NE(&from, this);
  const WorldToGatePacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorldToGatePacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WorldToGatePacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WorldToGatePacket)
    MergeFrom(*source);
  }
}

void WorldToGatePacket::MergeFrom(const WorldToGatePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WorldToGatePacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_body().size() > 0) {

    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
}

void WorldToGatePacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WorldToGatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldToGatePacket::CopyFrom(const WorldToGatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WorldToGatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldToGatePacket::IsInitialized() const {
  return true;
}

void WorldToGatePacket::InternalSwap(WorldToGatePacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldToGatePacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GateToWorldPacket::InitAsDefaultInstance() {
}
class GateToWorldPacket::_Internal {
 public:
};

GateToWorldPacket::GateToWorldPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GateToWorldPacket)
}
GateToWorldPacket::GateToWorldPacket(const GateToWorldPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_body().empty()) {
    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:GateToWorldPacket)
}

void GateToWorldPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GateToWorldPacket_SeFNodeNet_2eproto.base);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

GateToWorldPacket::~GateToWorldPacket() {
  // @@protoc_insertion_point(destructor:GateToWorldPacket)
  SharedDtor();
}

void GateToWorldPacket::SharedDtor() {
  msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GateToWorldPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GateToWorldPacket& GateToWorldPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GateToWorldPacket_SeFNodeNet_2eproto.base);
  return *internal_default_instance();
}


void GateToWorldPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:GateToWorldPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  _internal_metadata_.Clear();
}

const char* GateToWorldPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GateToWorldPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GateToWorldPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_id(), target);
  }

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GateToWorldPacket)
  return target;
}

size_t GateToWorldPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GateToWorldPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_body());
  }

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GateToWorldPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GateToWorldPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const GateToWorldPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GateToWorldPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GateToWorldPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GateToWorldPacket)
    MergeFrom(*source);
  }
}

void GateToWorldPacket::MergeFrom(const GateToWorldPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GateToWorldPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_body().size() > 0) {

    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
}

void GateToWorldPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GateToWorldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateToWorldPacket::CopyFrom(const GateToWorldPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GateToWorldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateToWorldPacket::IsInitialized() const {
  return true;
}

void GateToWorldPacket::InternalSwap(GateToWorldPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GateToWorldPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameToChatPacket::InitAsDefaultInstance() {
}
class GameToChatPacket::_Internal {
 public:
};

GameToChatPacket::GameToChatPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameToChatPacket)
}
GameToChatPacket::GameToChatPacket(const GameToChatPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_body().empty()) {
    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:GameToChatPacket)
}

void GameToChatPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameToChatPacket_SeFNodeNet_2eproto.base);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

GameToChatPacket::~GameToChatPacket() {
  // @@protoc_insertion_point(destructor:GameToChatPacket)
  SharedDtor();
}

void GameToChatPacket::SharedDtor() {
  msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameToChatPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameToChatPacket& GameToChatPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameToChatPacket_SeFNodeNet_2eproto.base);
  return *internal_default_instance();
}


void GameToChatPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:GameToChatPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  _internal_metadata_.Clear();
}

const char* GameToChatPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameToChatPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameToChatPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_id(), target);
  }

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameToChatPacket)
  return target;
}

size_t GameToChatPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameToChatPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_body());
  }

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameToChatPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameToChatPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const GameToChatPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameToChatPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameToChatPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameToChatPacket)
    MergeFrom(*source);
  }
}

void GameToChatPacket::MergeFrom(const GameToChatPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameToChatPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_body().size() > 0) {

    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
}

void GameToChatPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameToChatPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameToChatPacket::CopyFrom(const GameToChatPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameToChatPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameToChatPacket::IsInitialized() const {
  return true;
}

void GameToChatPacket::InternalSwap(GameToChatPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameToChatPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChatToGamePacket::InitAsDefaultInstance() {
}
class ChatToGamePacket::_Internal {
 public:
};

ChatToGamePacket::ChatToGamePacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatToGamePacket)
}
ChatToGamePacket::ChatToGamePacket(const ChatToGamePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_body().empty()) {
    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:ChatToGamePacket)
}

void ChatToGamePacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatToGamePacket_SeFNodeNet_2eproto.base);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

ChatToGamePacket::~ChatToGamePacket() {
  // @@protoc_insertion_point(destructor:ChatToGamePacket)
  SharedDtor();
}

void ChatToGamePacket::SharedDtor() {
  msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatToGamePacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatToGamePacket& ChatToGamePacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatToGamePacket_SeFNodeNet_2eproto.base);
  return *internal_default_instance();
}


void ChatToGamePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatToGamePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  _internal_metadata_.Clear();
}

const char* ChatToGamePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatToGamePacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatToGamePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_id(), target);
  }

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatToGamePacket)
  return target;
}

size_t ChatToGamePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatToGamePacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_body());
  }

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatToGamePacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatToGamePacket)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatToGamePacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatToGamePacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatToGamePacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatToGamePacket)
    MergeFrom(*source);
  }
}

void ChatToGamePacket::MergeFrom(const ChatToGamePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatToGamePacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_body().size() > 0) {

    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
}

void ChatToGamePacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatToGamePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatToGamePacket::CopyFrom(const ChatToGamePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatToGamePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatToGamePacket::IsInitialized() const {
  return true;
}

void ChatToGamePacket::InternalSwap(ChatToGamePacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatToGamePacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameToWorldPacket::InitAsDefaultInstance() {
}
class GameToWorldPacket::_Internal {
 public:
};

GameToWorldPacket::GameToWorldPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameToWorldPacket)
}
GameToWorldPacket::GameToWorldPacket(const GameToWorldPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_body().empty()) {
    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:GameToWorldPacket)
}

void GameToWorldPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameToWorldPacket_SeFNodeNet_2eproto.base);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

GameToWorldPacket::~GameToWorldPacket() {
  // @@protoc_insertion_point(destructor:GameToWorldPacket)
  SharedDtor();
}

void GameToWorldPacket::SharedDtor() {
  msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameToWorldPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameToWorldPacket& GameToWorldPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameToWorldPacket_SeFNodeNet_2eproto.base);
  return *internal_default_instance();
}


void GameToWorldPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:GameToWorldPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  _internal_metadata_.Clear();
}

const char* GameToWorldPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameToWorldPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameToWorldPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_id(), target);
  }

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameToWorldPacket)
  return target;
}

size_t GameToWorldPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameToWorldPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_body());
  }

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameToWorldPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameToWorldPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const GameToWorldPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameToWorldPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameToWorldPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameToWorldPacket)
    MergeFrom(*source);
  }
}

void GameToWorldPacket::MergeFrom(const GameToWorldPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameToWorldPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_body().size() > 0) {

    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
}

void GameToWorldPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameToWorldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameToWorldPacket::CopyFrom(const GameToWorldPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameToWorldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameToWorldPacket::IsInitialized() const {
  return true;
}

void GameToWorldPacket::InternalSwap(GameToWorldPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameToWorldPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorldToGamePacket::InitAsDefaultInstance() {
}
class WorldToGamePacket::_Internal {
 public:
};

WorldToGamePacket::WorldToGamePacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WorldToGamePacket)
}
WorldToGamePacket::WorldToGamePacket(const WorldToGamePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_body().empty()) {
    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:WorldToGamePacket)
}

void WorldToGamePacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorldToGamePacket_SeFNodeNet_2eproto.base);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

WorldToGamePacket::~WorldToGamePacket() {
  // @@protoc_insertion_point(destructor:WorldToGamePacket)
  SharedDtor();
}

void WorldToGamePacket::SharedDtor() {
  msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorldToGamePacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorldToGamePacket& WorldToGamePacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorldToGamePacket_SeFNodeNet_2eproto.base);
  return *internal_default_instance();
}


void WorldToGamePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:WorldToGamePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  _internal_metadata_.Clear();
}

const char* WorldToGamePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorldToGamePacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorldToGamePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_id(), target);
  }

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorldToGamePacket)
  return target;
}

size_t WorldToGamePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WorldToGamePacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_body());
  }

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorldToGamePacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WorldToGamePacket)
  GOOGLE_DCHECK_NE(&from, this);
  const WorldToGamePacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorldToGamePacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WorldToGamePacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WorldToGamePacket)
    MergeFrom(*source);
  }
}

void WorldToGamePacket::MergeFrom(const WorldToGamePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WorldToGamePacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_body().size() > 0) {

    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
}

void WorldToGamePacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WorldToGamePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldToGamePacket::CopyFrom(const WorldToGamePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WorldToGamePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldToGamePacket::IsInitialized() const {
  return true;
}

void WorldToGamePacket::InternalSwap(WorldToGamePacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldToGamePacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginToWorldPacket::InitAsDefaultInstance() {
}
class LoginToWorldPacket::_Internal {
 public:
};

LoginToWorldPacket::LoginToWorldPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginToWorldPacket)
}
LoginToWorldPacket::LoginToWorldPacket(const LoginToWorldPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_body().empty()) {
    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:LoginToWorldPacket)
}

void LoginToWorldPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginToWorldPacket_SeFNodeNet_2eproto.base);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

LoginToWorldPacket::~LoginToWorldPacket() {
  // @@protoc_insertion_point(destructor:LoginToWorldPacket)
  SharedDtor();
}

void LoginToWorldPacket::SharedDtor() {
  msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginToWorldPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginToWorldPacket& LoginToWorldPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginToWorldPacket_SeFNodeNet_2eproto.base);
  return *internal_default_instance();
}


void LoginToWorldPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginToWorldPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  _internal_metadata_.Clear();
}

const char* LoginToWorldPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginToWorldPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginToWorldPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_id(), target);
  }

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginToWorldPacket)
  return target;
}

size_t LoginToWorldPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginToWorldPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_body());
  }

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginToWorldPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginToWorldPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginToWorldPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginToWorldPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginToWorldPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginToWorldPacket)
    MergeFrom(*source);
  }
}

void LoginToWorldPacket::MergeFrom(const LoginToWorldPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginToWorldPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_body().size() > 0) {

    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
}

void LoginToWorldPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginToWorldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginToWorldPacket::CopyFrom(const LoginToWorldPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginToWorldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginToWorldPacket::IsInitialized() const {
  return true;
}

void LoginToWorldPacket::InternalSwap(LoginToWorldPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginToWorldPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorldToLoginPacket::InitAsDefaultInstance() {
}
class WorldToLoginPacket::_Internal {
 public:
};

WorldToLoginPacket::WorldToLoginPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WorldToLoginPacket)
}
WorldToLoginPacket::WorldToLoginPacket(const WorldToLoginPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_body().empty()) {
    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:WorldToLoginPacket)
}

void WorldToLoginPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorldToLoginPacket_SeFNodeNet_2eproto.base);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

WorldToLoginPacket::~WorldToLoginPacket() {
  // @@protoc_insertion_point(destructor:WorldToLoginPacket)
  SharedDtor();
}

void WorldToLoginPacket::SharedDtor() {
  msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorldToLoginPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorldToLoginPacket& WorldToLoginPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorldToLoginPacket_SeFNodeNet_2eproto.base);
  return *internal_default_instance();
}


void WorldToLoginPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:WorldToLoginPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  _internal_metadata_.Clear();
}

const char* WorldToLoginPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorldToLoginPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorldToLoginPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_id(), target);
  }

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorldToLoginPacket)
  return target;
}

size_t WorldToLoginPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WorldToLoginPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_body());
  }

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorldToLoginPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WorldToLoginPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const WorldToLoginPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorldToLoginPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WorldToLoginPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WorldToLoginPacket)
    MergeFrom(*source);
  }
}

void WorldToLoginPacket::MergeFrom(const WorldToLoginPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WorldToLoginPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_body().size() > 0) {

    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
}

void WorldToLoginPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WorldToLoginPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldToLoginPacket::CopyFrom(const WorldToLoginPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WorldToLoginPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldToLoginPacket::IsInitialized() const {
  return true;
}

void WorldToLoginPacket::InternalSwap(WorldToLoginPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldToLoginPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorldToDBPacket::InitAsDefaultInstance() {
}
class WorldToDBPacket::_Internal {
 public:
};

WorldToDBPacket::WorldToDBPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WorldToDBPacket)
}
WorldToDBPacket::WorldToDBPacket(const WorldToDBPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_body().empty()) {
    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:WorldToDBPacket)
}

void WorldToDBPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorldToDBPacket_SeFNodeNet_2eproto.base);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

WorldToDBPacket::~WorldToDBPacket() {
  // @@protoc_insertion_point(destructor:WorldToDBPacket)
  SharedDtor();
}

void WorldToDBPacket::SharedDtor() {
  msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorldToDBPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorldToDBPacket& WorldToDBPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorldToDBPacket_SeFNodeNet_2eproto.base);
  return *internal_default_instance();
}


void WorldToDBPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:WorldToDBPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  _internal_metadata_.Clear();
}

const char* WorldToDBPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorldToDBPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorldToDBPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_id(), target);
  }

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorldToDBPacket)
  return target;
}

size_t WorldToDBPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WorldToDBPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_body());
  }

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorldToDBPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WorldToDBPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const WorldToDBPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorldToDBPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WorldToDBPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WorldToDBPacket)
    MergeFrom(*source);
  }
}

void WorldToDBPacket::MergeFrom(const WorldToDBPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WorldToDBPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_body().size() > 0) {

    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
}

void WorldToDBPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WorldToDBPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldToDBPacket::CopyFrom(const WorldToDBPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WorldToDBPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldToDBPacket::IsInitialized() const {
  return true;
}

void WorldToDBPacket::InternalSwap(WorldToDBPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldToDBPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBToWorldPacket::InitAsDefaultInstance() {
}
class DBToWorldPacket::_Internal {
 public:
};

DBToWorldPacket::DBToWorldPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DBToWorldPacket)
}
DBToWorldPacket::DBToWorldPacket(const DBToWorldPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_body().empty()) {
    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:DBToWorldPacket)
}

void DBToWorldPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBToWorldPacket_SeFNodeNet_2eproto.base);
  msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

DBToWorldPacket::~DBToWorldPacket() {
  // @@protoc_insertion_point(destructor:DBToWorldPacket)
  SharedDtor();
}

void DBToWorldPacket::SharedDtor() {
  msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DBToWorldPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBToWorldPacket& DBToWorldPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBToWorldPacket_SeFNodeNet_2eproto.base);
  return *internal_default_instance();
}


void DBToWorldPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:DBToWorldPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
  _internal_metadata_.Clear();
}

const char* DBToWorldPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBToWorldPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBToWorldPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_id(), target);
  }

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBToWorldPacket)
  return target;
}

size_t DBToWorldPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBToWorldPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_body());
  }

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  // int32 msg_id = 2;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBToWorldPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBToWorldPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const DBToWorldPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBToWorldPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBToWorldPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBToWorldPacket)
    MergeFrom(*source);
  }
}

void DBToWorldPacket::MergeFrom(const DBToWorldPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBToWorldPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_body().size() > 0) {

    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
}

void DBToWorldPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBToWorldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBToWorldPacket::CopyFrom(const DBToWorldPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBToWorldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBToWorldPacket::IsInitialized() const {
  return true;
}

void DBToWorldPacket::InternalSwap(DBToWorldPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBToWorldPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ServerReport* Arena::CreateMaybeMessage< ::ServerReport >(Arena* arena) {
  return Arena::CreateInternal< ::ServerReport >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerReportList* Arena::CreateMaybeMessage< ::ServerReportList >(Arena* arena) {
  return Arena::CreateInternal< ::ServerReportList >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerHeartBeat* Arena::CreateMaybeMessage< ::ServerHeartBeat >(Arena* arena) {
  return Arena::CreateInternal< ::ServerHeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::NodeToMasterPacket* Arena::CreateMaybeMessage< ::NodeToMasterPacket >(Arena* arena) {
  return Arena::CreateInternal< ::NodeToMasterPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::MasterToNodePacket* Arena::CreateMaybeMessage< ::MasterToNodePacket >(Arena* arena) {
  return Arena::CreateInternal< ::MasterToNodePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::GateToLoginPacket* Arena::CreateMaybeMessage< ::GateToLoginPacket >(Arena* arena) {
  return Arena::CreateInternal< ::GateToLoginPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::LoginToGatePacket* Arena::CreateMaybeMessage< ::LoginToGatePacket >(Arena* arena) {
  return Arena::CreateInternal< ::LoginToGatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::GateToGamePacket* Arena::CreateMaybeMessage< ::GateToGamePacket >(Arena* arena) {
  return Arena::CreateInternal< ::GateToGamePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::GameToGatePacket* Arena::CreateMaybeMessage< ::GameToGatePacket >(Arena* arena) {
  return Arena::CreateInternal< ::GameToGatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::GateToChatPacket* Arena::CreateMaybeMessage< ::GateToChatPacket >(Arena* arena) {
  return Arena::CreateInternal< ::GateToChatPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatToGatePacket* Arena::CreateMaybeMessage< ::ChatToGatePacket >(Arena* arena) {
  return Arena::CreateInternal< ::ChatToGatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::WorldToGatePacket* Arena::CreateMaybeMessage< ::WorldToGatePacket >(Arena* arena) {
  return Arena::CreateInternal< ::WorldToGatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::GateToWorldPacket* Arena::CreateMaybeMessage< ::GateToWorldPacket >(Arena* arena) {
  return Arena::CreateInternal< ::GateToWorldPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::GameToChatPacket* Arena::CreateMaybeMessage< ::GameToChatPacket >(Arena* arena) {
  return Arena::CreateInternal< ::GameToChatPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatToGamePacket* Arena::CreateMaybeMessage< ::ChatToGamePacket >(Arena* arena) {
  return Arena::CreateInternal< ::ChatToGamePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::GameToWorldPacket* Arena::CreateMaybeMessage< ::GameToWorldPacket >(Arena* arena) {
  return Arena::CreateInternal< ::GameToWorldPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::WorldToGamePacket* Arena::CreateMaybeMessage< ::WorldToGamePacket >(Arena* arena) {
  return Arena::CreateInternal< ::WorldToGamePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::LoginToWorldPacket* Arena::CreateMaybeMessage< ::LoginToWorldPacket >(Arena* arena) {
  return Arena::CreateInternal< ::LoginToWorldPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::WorldToLoginPacket* Arena::CreateMaybeMessage< ::WorldToLoginPacket >(Arena* arena) {
  return Arena::CreateInternal< ::WorldToLoginPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::WorldToDBPacket* Arena::CreateMaybeMessage< ::WorldToDBPacket >(Arena* arena) {
  return Arena::CreateInternal< ::WorldToDBPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::DBToWorldPacket* Arena::CreateMaybeMessage< ::DBToWorldPacket >(Arena* arena) {
  return Arena::CreateInternal< ::DBToWorldPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
